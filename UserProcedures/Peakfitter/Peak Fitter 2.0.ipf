#pragma rtGlobals=1		// Use modern global access method.//version 1.11ER 	allowed negative DS parameter, it means reverse x-axis//						fixed history checkbox issues//version 1.20JM	 Added foldering so that multiple versions can be run//					 User procedures are now located in documents#include <Strings as Lists>#include <NumInList>#include <Keyword-Value>#include "colorTables"#include "PFnewfunctions1.11"//; execute/P/Q "string/g :PF:version=\"2.0\""; execute/P/Q "doLogoWindow()"function NewPF()	string currentdf=getdatafolder(1)	string dfn=uniquename("PF_",11,0)	string df="root:"+dfn+":"	string winnam=winName(0,1)	string version="\"2.0\""//	DoWindow/C $dfn	newdatafolder/o $dfn	MakePFVariables(dfn)	MakePFWaves(dfn)	MakePFPanel(dfn)	updatePFPanel(dfn)endFunction PF_AreYouSure()	variable yn	prompt yn,"Are you sure?",popup "yes;no"	Doprompt "Initialize:", yn	if (yn==2)		abort	endif	if (V_Flag)		abort									endif	print yn	return ynend	Function MakePFvariables(dfn)	string dfn 	string df="root:"+dfn+":"	///////// strings	MakePFstr(df,"winnam",df)		MakePFvar(df,"v_chisq",nan)		MakePFvar(df,"numPks",0)	MakePFvar(df,"npnts",nan)	MakePFvar(df,"hasFE",0)	MakePFvar(df,"nchan",0)	nvar numPks=$(df+"numPks")	make/o/n=(7,numPks+1) $(df+"fitparms")   // n=(parameters, numpeaks)	make/o/n=(7,numPks+1,2) $(df+"minmax")	make/o/n=(7,numPks+1,3) $(df+"hold")	make/o/n=(numPks+1) $(df+"fittype")	make/o/n=0 $(df+"hold1store"), $(df+"convstore")	wave fittype=$(df+"fittype")	fittype[0]=2 //linear	make/o/n=(3,21) $(df+"DSGtable")		MakePFstr(df,"xwv","")	MakePFstr(df,"ywv","")	make/o/t/n=7 $(df+"parmnames")	wave/t parmnames=$(df+"parmnames")	parmnames={"POS", "AMP", "LW", "GW", "ASYM", "SPLIT", "RATIO"}		MakePFvar(df,"channel",nan)	MakePFvar(df,"peak",0)	MakePFvar(df,"oldpeak",-1)	MakePFvar(df,"LWguess",0.1)	MakePFvar(df,"LWguess",0.1)	MakePFvar(df,"GWGuess",0.05)	MakePFvar(df,"ASYMguess",0.1)	MakePFvar(df,"SPLITguess",1.0)	MakePFvar(df,"RATIOguess",0.1)	MakePFvar(df,"nextPkAdd",0)		MakePFvar(df,"chanAutoHist",0)	MakePFvar(df,"g_currPk",nan)		MakePFvar(df,"v_fititerstart",-1)	MakePFvar(df,"isSeries",0)		variable i	for(i=0;i<dimsize(parmnames,0);i+=1)		MakePFvar(df, parmnames[i],nan)		MakePFvar(df, parmnames[i]+"RelPeak",nan)		MakePFvar(df, parmnames[i]+"RelVal",nan)		MakePFvar(df, parmnames[i]+"RelHi",nan)		MakePFvar(df, parmnames[i]+"RelLo",nan)	endfor		MakePFvar(df,"bkgd0",nan)	MakePFvar(df,"bkgd1",nan)	MakePFvar(df,"bkgd2",nan)	MakePFvar(df,"bkgd3",nan)	MakePFvar(df,"bkgd4",nan)	MakePFvar(df,"bkgd5",nan)	MakePFvar(df,"bkgd6",nan)	MakePFvar(df,"FEPos",nan)	MakePFvar(df,"FEWidth",nan)		MakePFstr(df,"lastExportName","")	MakePFvar(df,"offsetStackPF",nan)	MakePFvar(df,"shiftStackPF",nan)		wave hold=$(df+"hold"),minmax=$(df+"minmax"), fitparms=$(df+"fitparms")	hold[] [] [0]=0	hold[] [] [1]=nan	hold[] [] [2]=nan	minmax=nan	fitparms[][0]=0           //  set background to line, values zero	MakePFstr(df,"axName","")		//History Browser	MakePFvar(df,"whichHistBrowse",0)	EndFunction MakePFvar(df,name,val)	string df, name	variable  val	variable/g $(df+name)	nvar var=$(df+name)	var=valEndFunction MakePFstr(df,name,val)	string df, name,val	string/g $(df+name)	svar var=$(df+name)	var=valEndproc PF_DoLogoWindow(dfn)	string dfn	string df="root:"+dfn+":"	silent 1; pauseupdate	dowindow/f PFLogo	wave logo=$(df+"logo")	if (v_flag==0)		if (exists(logo)==0)			NewPath/q/o PFPath SpecialDirPath("Igor Pro User Files", 0, 0, 0)+":PeakFitter" //JM looks in Documents/Wavemeterics...			ImageLoad/P=PFPath/T=tiff/N=logo/o "logo.tif"			movewave logo df			movewave logocmap df		endif		display		DoWindow/C/T PFLogo,"PFLogo"		appendimage logo		ModifyImage logo cindex= $(df+"logoCMap")		setaxis/a/r left		ModifyGraph width=906/2,height=348/2,nticks=0, wbrgb=(65535,49157,16385)		TextBox/C/N=text0 "\JCPeak Fitter Version "+:PF:VERSION+"\r(c) 2002 Eli Rotenberg, Lawrence Berkeley National Laboratory";DelayUpdate		AppendText "\\K(65535,0,0)May be distributed freely assuming this panel is included as-is.";DelayUpdate		AppendText "\\K(1,4,52428)Email bugs/suggestions to erotenberg@lbl.gov"		AppendText "\\K(1,4,52428)Latest version at http://www-bl7.lbl.gov/BL7/software/software.html"		TextBox/C/N=text0/X=0.55/Y=2.96/A=MB/E/F=0/B=1	endifend			function MakePFWaves(dfn) 	string dfn	string df="root:"+dfn+":"		string yw	svar winnam=$(df+"winnam")//	string imgname=stringfromlist(0,ImageNameList("",";"),";")//testing	string list=imgname+";"+ WaveList("*", ";", "")	prompt yw,"y-wave",popup list//WaveList("*", ";", "")	DoPrompt "Select Data to Fit"  yw	if (V_Flag)		abort									endif	svar ywv=$(df+"ywv"),	xwv=$(df+"xwv")	ywv=yw	xwv=xwavename(dfn,ywv)	wave wv=$yw		//get wave's data folder -- JM 8/2016	string/g $(df+"wvdf")	svar wvdf=$(df+"wvdf")	wvdf=GetWavesDataFolder(wv,1)	//make x-wave is no x-wave is present -- JM 8/2016	if(strlen(xwv)==0)		make/o/n=(dimsize(wv,0)) $(df+"xwave")		wave xwave=$(df+"xwave")		xwave[]=dimoffset(wv,0)+dimdelta(wv,0)*p	else		duplicate/o $xwv $(df+"xwave")		wave xwave=$(df+"xwave")	endif		nvar isSeries=$(df+"isSeries")	make/o/n=(dimsize(wv,0)) $(df+"SingleChannel")		if(wavedims(wv)==2)		//wave is a matrix		if(dimsize(wv,1)==1)			isSeries=0	//just a trivial one-column matrix			wave dwv=wv		else			isSeries=1	//series fit			wave dwv=$(df+"SingleChannel")		endif	else		isSeries=0		wave dwv=wv	endif		make/o/n=(dimsize(wv,0)) $(df+"bkgdRgn")	wave bkgdRgn=$(df+"bkgdRgn")	SetScale/P x dimoffset(wv,0),dimdelta(wv,0),"", bkgdRgn	duplicate/o $(df+"bkgdRgn") $(df+"bkgdWeight"), $(df+"bkgdFit"), $(df+"peakFit")	duplicate/o $(df+"bkgdRgn") $(df+"peak1"), $(df+"peak2"), $(df+"peak3"), $(df+"peak4"), $(df+"peak5")	duplicate/o $(df+"bkgdRgn") $(df+"peak6"), $(df+"peak7"), $(df+"peak8"), $(df+"peak9"), $(df+"peak10")	duplicate/o $(df+"bkgdRgn") $(df+"peak11"), $(df+"peak12"), $(df+"peak13"), $(df+"peak14"), $(df+"peak15")	duplicate/o $(df+"bkgdRgn") $(df+"peak16"), $(df+"peak17"), $(df+"peak18"), $(df+"peak19"), $(df+"peak20")	wave bkgdRgn=$(df+"bkgdRgn"), bkgdWeight=$(df+"bkgdWeight"),bkgdFit= $(df+"bkgdFit")	bkgdfit=nan ; bkgdrgn=nan; bkgdweight=0		nvar nchan=$(df+"nchan")		if(isSeries)		svar axName=$(df+"axName")		nvar npnts=$(df+"npnts")	 	axName="LChannel" //name for axis for spectral data	 	string g_sd=yw	 	wave ywave=$yw		nchan=dimsize(ywave,1)		wave SingleChannel=$(df+"SingleChannel")		string ss=waveinfo(wv,0)		SetScale/P x dimoffset(wv,0),dimdelta(wv,0),"", singlechannel		npnts=dimsize(wv,0)		variable g_indstart=dimoffset(wv,1)		variable g_indincr=dimdelta(wv,1)//		PF_appwv(dfn, df+"xwave",df+"singlechannel")//		ModifyGraph/w=$dfn mode(SingleChannel)=3,marker(SingleChannel)=18,msize(SingleChannel)=2//		ModifyGraph/w=$dfn axisEnab($axname)={0.55,1},freePos($axname)=0//		SetVariable channel,pos={ 100,0},size={100,14},proc=PF_SetVarChannel,title="channel",win=$dfn//		SetVariable channel,fSize=9,limits={0,nchan-1,1},value=$(df+"channel"),win=$dfn//		Button showFitter,pos={215,0},size={50,20},fSize=10,title="FitPanel",proc=PF_DoFitterWindowProc,win=$dfn//		Button showHistory,pos={270,0},size={50,20},fSize=10,proc=PF_HistoryWindowProc,title="History",win=$dfn//		ModifyGraph margin=50		nvar whichHistBrowse=$(df+"whichHistBrowse")		whichHistBrowse=0		variable startChan=round(nchan/2)				//string dwv="Singlechannel" 		make/o/n=(nchan) $(df+"hist_npks"), $(df+"hist_chisq"), $(df+"hist_isStored") 		wave hist_npks=$(df+"hist_npks"), hist_chisq=$(df+"hist_chisq"), hist_isStored=$(df+"hist_isStored") 		hist_npks=nan		hist_chisq=nan		hist_isStored=0 		make/o/n=(20,nchan) $(df+"hist_fittype")	 	make/o/n=(7,20,nchan)$(df+"hist_fitparms") 		make/o/n=(7,20,3,nchan) $(df+"hist_hold") 		wave  hist_fittype=$(df+"hist_fittype"),hist_fitparms=$(df+"hist_fitparms"), hist_hold=$(df+"hist_hold") 		hist_fittype=nan 		hist_fitparms=nan		make/o/n=(nchan+1,20) $(df+"hist_POS"), $(df+"hist_AMP"), $(df+"hist_LW")		make/o/n=(nchan+1,20) $(df+"hist_GW"),$(df+"hist_ASYM"),$(df+"hist_SPLIT"),$(df+"hist_RATIO")		make/o/n=(nchan+1,20) $(df+"hist_indvar")		wave hist_POS=$(df+"hist_POS"), hist_AMP=$(df+"hist_AMP"), hist_LW=$(df+"hist_LW")		wave hist_GW=$(df+"hist_GW"),hist_ASYM=$(df+"hist_ASYM"),hist_SPLIT=$(df+"hist_SPLIT"),hist_RATIO=$(df+"hist_RATIO")		wave hist_indvar=$(df+"hist_indvar")		hist_indvar[][]=p*g_indincr+g_indstart		make/o/n=(nchan+1,20) $(df+"browse_y"), $(df+"browse_x")		wave browse_y=$(df+"browse_y"), browse_x=$(df+"browse_x")		//		ModifyGraph/w=$dfn axisEnab(left)={0,0.45}		//make cursor line and enable live update		make/o/n=2 $(df+"csrx"), $(df+"csry")		wave csrx=$(df+"csrx"), csry=$(df+"csry")		csrx={-inf,inf}		csry={hist_indvar[startchan][0],hist_indvar[startchan][0]}//		PF_appwvleft(dfn,df+"csrx", df+"csry")//		ModifyGraph/w=$dfn rgb(csry)=(0,65535,65535)//		SetWindow $dfn hook=PF_imgFitHookFcn, hookevents=3		PF_CopyChannel(dfn,startChan)				//append position history		hist_pos=nan		//		PF_appwvleft(dfn,df+"hist_POS", df+"hist_indvar")//		ModifyGraph mode(hist_indvar)=3,marker(hist_indvar)=8,msize(hist_indvar)=2//		ModifyGraph rgb(hist_indvar)=(65535,0,0)	else 		svar axName=$(df+"axName") 		axName="Left"		nchan=1		variable npnp=numpnts($df+"ywv")		nvar npnts=$(df+"npnts")		npnts=numpnts($ywv)	endif	dowindow/f $dfn//	if (isSeries==0)//		modifygraph rgb(ywv)=(0,0,0)//	else//		modifygraph rgb(singlechannel)=(17476,17476,17476)//	endif//	showinfo	endfunction PF_imgFitHookfcn (infostr)//===============//  CMD/CTRL key + mouse motion = dynamical update of cross-hair//  Modifier bits:  0001=mousedown, 0010=shift  , 0100=option/alt, 1000=cmd/ctrl	string infostr	string dfn=winname(0,1)	string df="root:"+dfn+":"	variable mousex,mousey,ax,ay, modif	modif=numbykey("modifiers", infostr)  & 15	wave hi=$(df+"hist_indvar"), csry=$(df+"csry")	nvar nc=$(df+"nchan"), ch=$(df+"channel")	nvar auto=$(df+"chanAutoHist")	if (((modif==9)+(modif==11))*(strsearch(infostr,"EVENT:mouse",0)>0))   //mousedown * (cmd/ctrl or cmd/ctrl+shift)		mousey=numbykey("mousey",infostr)		ay=axisvalfrompixel(dfn,"left",mousey)		//convert indvar to channel#		findlevel/q hi PF_ForceRange(ay,hi[0][0],hi[nc-1][0])		ch=x2pnt(hi,v_levelx)		csry=hi[ch][0]		PF_CopyChannel(dfn,ch)		if (auto)			PF_doHistory2Fit(dfn)		endif		DoWindow/F $(dfn+"_Panel")		updatePFPanel(dfn)		return 1	else		return 0	endifendfunction PF_ForceRange(xx,x0,x1)	variable xx,x0,x1	if (xx<min(x0,x1))		xx=x0	endif	if(xx>max(x0,x1))		xx=x1	endif	return xxendfunction PF_CopyChannel(dfn,which)	string dfn	variable which	string df="root:"+dfn+":"	svar ss=$(df+"ywv")	wave sc=$(df+"SingleChannel")	wave gy=$ss	sc=gy[p+which*dimsize(gy,0)] 	nvar chan=$(df+"channel")	chan=which	wave csry=$(df+"csry"), hi=$(df+"hist_indvar")	csry={hi[which][0],hi[which][0]}end//---------------------------------------------function updatePFPanel(dfn) //test	string dfn	string df="root:"+dfn+":"	DoWindow/F $winname(0,64)	nvar bkgd0=$(df+"bkgd0"),bkgd1=$(df+"bkgd1"),bkgd2=$(df+"bkgd2"),bkgd3=$(df+"bkgd3")	nvar bkgd4=$(df+"bkgd4"),bkgd5=$(df+"bkgd5"),bkgd6=$(df+"bkgd6")	nvar FEPos=$(df+"FEPos"), FEwidth=$(df+"FEwidth"), hasFE=$(df+"hasFE"), numpks=$(df+"numpks")	nvar pos=$(df+"pos"), amp=$(df+"amp"), lw=$(df+"lw"), gw=$(df+"gw")	nvar asym=$(df+"asym"), split=$(df+"split"), ratio=$(df+"ratio")	nvar poslo=$(df+"poslo"), amplo=$(df+"amplo"), lwlo=$(df+"lwlo"), gwlo=$(df+"gwlo")	nvar asymlo=$(df+"asymlo"), splitlo=$(df+"splitlo"), ratiolo=$(df+"ratiolo")			nvar poshi=$(df+"poshi"), amphi=$(df+"amphi"), lwhi=$(df+"lwhi"), gwhi=$(df+"gwhi")	nvar asymhi=$(df+"asymhi"), splithi=$(df+"splithi"), ratiohi=$(df+"ratiohi")	nvar peak=$(df+"peak"), isSeries=$(df+"isSeries")	nvar posrelpeak=$(df+"posrelpeak"), posrelval=$(df+"posrelval"), amprelpeak=$(df+"amprelpeak"), amprelval=$(df+"amprelval")	nvar lwrelpeak=$(df+"lwrelpeak"), lwrelval=$(df+"lwrelval"), gwrelpeak=$(df+"gwrelpeak"), gwrelval=$(df+"gwrelval")	nvar asymrelpeak=$(df+"asymrelpeak"), asymrelval=$(df+"asymrelval"), splitrelpeak=$(df+"splitrelpeak"), splitrelval=$(df+"splitrelval")	nvar ratiorelpeak=$(df+"ratiorelpeak"), ratiorelval=$(df+"ratiorelval")		nvar nchan=$(df+"nchan")	wave fitparms=$(df+"fitparms"), hold=$(df+"hold"),fittype=$(df+"fittype")	wave minmax=$(df+"minmax")	bkgd0=fitparms[0][0];		checkbox fix0 value=hold[0][0][0], win=$(dfn+"_Panel")	bkgd1=fitparms[1][0];		checkbox fix1 value=hold[1][0][0], win=$(dfn+"_Panel")	bkgd2=fitparms[2][0];		checkbox fix2 value=hold[2][0][0], win=$(dfn+"_Panel")	bkgd3=fitparms[3][0];		checkbox fix3 value=hold[3][0][0], win=$(dfn+"_Panel")	bkgd4=fitparms[4][0];		checkbox fix4 value=hold[4][0][0], win=$(dfn+"_Panel")	FEPos=fitparms[5][0];		checkbox fixFEPOS value=hold[5][0][0], win=$(dfn+"_Panel")	FEWidth=fitparms[6][0];		checkbox fixFEWid value=hold[6][0][0], win=$(dfn+"_Panel")		 PF_disableBkgdParms(dfn,0)		checkbox FECheckBox variable=$(df+"hasFE"),win=$(dfn+"_Panel")	PF_disableFEParms(dfn,hasFE)		if (peak >numpks)		peak=numpks	endif	if (peak<1)		peak=0//1	endif	SetVariable peak,win=$(dfn+"_Panel"), limits={1,numpks+(numpks==0)*1,1}	if(numpks!=0)		pos=fitparms[0][peak];		poslo=minmax[0][peak][0];		poshi=minmax[0][peak][1] 			amp=fitparms[1][peak]; 		amplo=minmax[1][peak][0];		amphi=minmax[1][peak][1]		lw=fitparms[2][peak];		lwlo=minmax[2][peak][0];		lwhi=minmax[2][peak][1]		gw=fitparms[3][peak];		gwlo=minmax[3][peak][0];		gwhi=minmax[3][peak][1]		asym=fitparms[4][peak];	asymlo=minmax[4][peak][0];	asymhi=minmax[4][peak][1]		split=fitparms[5][peak];		splitlo=minmax[5][peak][0];		splithi=minmax[5][peak][1]		ratio=fitparms[6][peak];		ratiolo=minmax[6][peak][0];		ratiohi=minmax[6][peak][1]		button csr2thispk,win=$(dfn+"_Panel"),disable=0		button killpk,win=$(dfn+"_Panel"),disable=0		setvariable peak,win=$(dfn+"_Panel"),disable=0		popupmenu thispktyp,win=$(dfn+"_Panel"),disable=0,mode=abs(fittype[peak])	else		pos=nan	;poslo=minmax[0][peak][0];		poshi=minmax[0][peak][1] 			amp=nan	;amplo=minmax[1][peak][0];	amphi=minmax[1][peak][1]		lw=nan		;lwlo=minmax[2][peak][0];		lwhi=minmax[2][peak][1]		gw=nan		;gwlo=minmax[3][peak][0];		gwhi=minmax[3][peak][1]		asym=nan	;asymlo=minmax[4][peak][0];	asymhi=minmax[4][peak][1]		split=nan	;splitlo=minmax[5][peak][0];		splithi=minmax[5][peak][1]		ratio=nan	;ratiolo=minmax[6][peak][0];	ratiohi=minmax[6][peak][1]		button  csr2thispk,win=$(dfn+"_Panel"),disable=2		button killpk,win=$(dfn+"_Panel"),disable=2		setvariable peak,win=$(dfn+"_Panel"),disable=1		popupmenu thispktyp,win=$(dfn+"_Panel"),disable=0	endif	if(isSeries==0)		button fitspectra,win=$(dfn+"_Panel"),disable=2		button hist2fit,win=$(dfn+"_Panel"),disable=2		button fit2hist,win=$(dfn+"_Panel"),disable=2		button seriesreport,win=$(dfn+"_Panel"),disable=2	else		button fitspectra,win=$(dfn+"_Panel"),disable=0		button hist2fit,win=$(dfn+"_Panel"),disable=0		button fit2hist,win=$(dfn+"_Panel"),disable=0		button seriesreport,win=$(dfn+"_Panel"),disable=0	endif	SetVariable channel win=$(dfn+"_Panel"), limits={0,nchan,1}	PopupMenu  poshold win=$(dfn+"_Panel"),mode=hold[0][peak][0]+1 ;		posrelpeak=hold[0][peak][2];		posrelval=hold[0][peak][1]	PopupMenu amphold win=$(dfn+"_Panel"),mode=hold[1][peak][0]+1 ;		amprelpeak=hold[1][peak][2];		amprelval=hold[1][peak][1]	PopupMenu lwhold win=$(dfn+"_Panel"),mode=hold[2][peak][0]+1 ;			lwrelpeak=hold[2][peak][2];		lwrelval=hold[2][peak][1]	PopupMenu gwhold win=$(dfn+"_Panel"),mode=hold[3][peak][0]+1 ;			gwrelpeak=hold[3][peak][2];		gwrelval=hold[3][peak][1]	PopupMenu asymhold win=$(dfn+"_Panel"),mode=hold[4][peak][0]+1 ;		asymrelpeak=hold[4][peak][2];		asymrelval=hold[4][peak][1]	PopupMenu splithold win=$(dfn+"_Panel"),mode=hold[5][peak][0]+1 ;		splitrelpeak=hold[5][peak][2];		splitrelval=hold[5][peak][1]	PopupMenu ratiohold win=$(dfn+"_Panel"),mode=hold[6][peak][0]+1 ;		ratiorelpeak=hold[6][peak][2];		ratiorelval=hold[6][peak][1]		string parmlist="POS;AMP;LW;GW;ASYM;SPLIT;RATIO"	variable i	For(i=0;i<itemsinlist(parmlist,";");i+=1)		PF_disableparms(stringfromlist(i,parmlist),0)		PF_showoptions(stringfromlist(i,parmlist))		PF_disableparms(stringfromlist(i,parmlist),0)	endfor			PopupMenu background win=$(dfn+"_Panel"),mode=abs(fittype[0])	doWindow/F $dfn	updateXPSFit(dfn,0)	controlupdate/a/w=$(dfn+"_Panel")	PF_SetPeakColors()end//depending on fit hold setting, shows appropriate optional parametersfunction PF_Showoptions(pr) 	string pr	variable ishidden, dis	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	controlinfo/w=dfn $("edit"+pr)	ishidden=v_disable	controlinfo/w=dfn $(pr+"hold")	if(v_value <3) //free or fixed		setvariable $(pr+"lo"),win=$(dfn+"_Panel"),disable=1		setvariable $(pr+"hi"),win=$(dfn+"_Panel"),disable=1		setvariable $(pr+"relval"),win=$(dfn+"_Panel"),disable=1		setvariable $(pr+"relpeak"),win=$(dfn+"_Panel"),disable=1		if (!isHidden)			setvariable $("edit"+pr), win=$(dfn+"_Panel"),disable=0		endif	endif	nvar lo=$(df+pr+"lo"), hi=$(df+pr+"hi"), pr_=$(df+pr)	if (v_value==3)	//between		if (numtype(lo)==2)	//nan			lo=pr_		endif		if(numtype(hi)==2)  //nan			hi=pr_		endif		setvariable $(pr+"relval"),win=$(dfn+"_Panel"),disable=1		setvariable $(pr+"relpeak"),win=$(dfn+"_Panel"),disable=1		if (!isHidden)			setvariable $("edit"+pr), win=$(dfn+"_Panel"),disable=0			dis=0		else			dis=1		endif		setvariable $(pr+"lo"),win=$(dfn+"_Panel"),disable=dis		setvariable $(pr+"hi"),win=$(dfn+"_Panel"),disable=dis	endif	if(v_value==4) //relative to another peak		setvariable $(pr+"lo"),win=$(dfn+"_Panel"),disable=1		setvariable $(pr+"hi"),win=$(dfn+"_Panel"),disable=1		if (!isHidden)			setvariable $("edit"+pr), win=$(dfn+"_Panel"),disable=2			dis=0		else			dis=1		endif		setvariable $(pr+"relval"),win=$(dfn+"_Panel"),disable=dis		setvariable $(pr+"relpeak"),win=$(dfn+"_Panel"),disable=dis	endifend//hide those bkgd parameters which are not needed//if mode=0 then normal; if mode=1 then force displayfunction PF_DisableBkgdParms(dfn,mode)	string dfn	variable mode//	mode=0	variable nterms,i	string df="root:"+dfn+":"	wave fittype=$(df+"fittype")	nterms=abs(fittype[0])	For(i=0;i<=7;i+=1)		setvariable $("bkgd"+num2str(i)),win=$(dfn+"_Panel"),disable=(1-mode)*(1-(i<nterms))		checkbox $("fix"+num2str(i)),win=$(dfn+"_Panel"),disable=(1-mode)*(1-(i<nterms))	endforend//hide FE parameters if not needed//if mode=0 then hide; if mode=1 then force displayfunction PF_DisableFEParms(dfn,mode)	string dfn	variable mode//	mode=0	variable nterms	string df="root:"+dfn+":"	//if (hasFE==0)		setvariable FEPos,win=$(dfn+"_Panel"),disable=(1-mode)		checkbox fixFEPos,win=$(dfn+"_Panel"),disable=(1-mode)		setvariable FEWidth,win=$(dfn+"_Panel"),disable=(1-mode)		checkbox fixFEWid,win=$(dfn+"_Panel"),disable=(1-mode)	//endifend//if a peak type doesn't include a parameter, hide the parameter//enable=1 --> show instead of hidefunction PF_DisableParms(pr,enable)	string pr; variable enable//	enable=1	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	variable dis	nvar pr_=$(df+pr),lo=$(df+pr+"lo"), hi=$(df+pr+"hi"), hold=$(df+pr+"hold")	nvar relval=$(df+pr+"relval"), relpeak=$(df+pr+"relpeak")	dis=(numtype(pr_)==2) ; setvariable $("edit"+pr),win=$(dfn+"_Panel"),disable=dis*(1-enable)	popupmenu $(pr+"hold"),win=$(dfn+"_Panel"),disable=dis*(1-enable)	dis=(numtype(lo)==2) ; setvariable $(pr+"lo"),win=$(dfn+"_Panel"),disable=dis*(1-enable)	dis=(numtype(hi)==2) ; setvariable $(pr+"hi"),win=$(dfn+"_Panel"),disable=dis*(1-enable)	dis=(numtype(relval)==2) ; setvariable $(pr+"relval"),win=$(dfn+"_Panel"),disable=dis*(1-enable)	dis=(numtype(relpeak)==2) ; setvariable $(pr+"relpeak"),win=$(dfn+"_Panel"),disable=dis*(1-enable)endfunction PF_ShowParms()	variable mode	prompt mode, "mode", popup "showall;hide minmax;hide relval&pk"	Doprompt "", mode	if (V_Flag)		abort									endif	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	PF_disableparms("POS",1)	PF_disableparms("AMP",1)	PF_disableparms("LW",1)	PF_disableparms("GW",1)	PF_disableparms("ASYM",1)	PF_disableparms("SPLIT",1)	PF_disableparms("RATIO",1)	string pr, s1, s2	if (mode>=2)		if (mode==2)			s1="lo";s2="hi"		endif		if (mode==3)			s1="relval"; s2="relpeak"		endif		pr="POS" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1		pr="AMP" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1		pr="LW" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1		pr="GW" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1		pr="ASYM" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1		pr="SPLIT" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1		pr="RATIO" ; setvariable $(pr+s1),win=$(dfn+"_Panel"),disable=1; setvariable $(pr+s2),win=$dfn,disable=1	endifend		//if pp=0, update all peaks else just pk# (pp)function updateXPSFit(dfn,pp)	variable pp	string dfn	string df="root:"+dfn+":"	nvar FEPos=$(df+"FEPos") , FEWidth=$(df+"FEWidth") , hasFE=$(df+"hasFE")	nvar v_fititerstart=$(df+"v_fititerstart")	nvar numpks=$(df+"numpks")		svar  xwv=$(df+"xwv"), ywv=$(df+"ywv"), wvdf=$(df+"wvdf")	wave xwave=$(df+"xwave"), ywave=$(wvdf+ywv)	wave bkgdfit=$(df+"bkgdfit")	wave fitparms=$(df+"fitparms"),fittype=$(df+"fittype")	wave peakfit=$(df+"peakfit")	PF_MakeConstraints(dfn)	variable hasBkgd//, xx, wvx	wavestats/q bkgdfit	hasBkgd=1	peakfit=0	string peakname	make/o/n=(dimsize(fitparms,0)) $(df+"tmp_coef")	wave coef=$(df+"tmp_coef")	coef[]=fitparms[p][0]//	if(hasBkgd)//		polyflexwv(coef,xwave,bkgdFit)//		bkgdFit=PF_BkgdFunction(fitparms,numpnts(fittype),x)//	endif	variable i	For(i=0;i<20-numpks;i+=1)		PF_remwv(dfn,"peak"+num2str(i+1))	endfor	if(numpks==0)		PF_remwv(dfn,"peakfit")	else		v_fitIterStart=1 //force new fft if needed in lor_don_gauss function		For(i=0;i<numpks;i+=1)			peakname="peak"+num2str(i+1)			wave peakwv=$(df+peakname)			if((pp==0)+((i+1)==pp)) 					subFunctionwv(fitparms,fittype,xwave,i+1,peakwv) //JM modified subFunction to use waves instead of looping over x 8/2016					peakwv/=subFunction0(fitparms,fittype,i+1)			endif			if (hasFE*((pp==0)+((i+1)==pp)))				//$peakname *= ( 1/(exp((x-FEPos)/FEwidth)+1) )			endif			if (hasbkgd*((pp==0)+((i+1)==pp))) 				peakwv+=bkgdfit			endif			peakfit+=peakwv			if(hasBkgd) 				peakfit-=bkgdfit				PF_appwv(dfn,df+"xwave",df+"bkgdfit")			endif			PF_appwv(dfn,df+"xwave",df+peakname)		endfor						if (hasBkgd)			peakfit+=bkgdfit		endif		if (hasFE)			peakfit*=( 1/(exp((x-FEPos)/FEwidth)+1) )		endif		PF_appwv(dfn,df+"xwave",df+"peakfit")//		ModifyGraph rgb(peak2)=(0,0,65535)			endif	string resname="res_"+ywv	wave reswv=$(df+resname)	if (exists(resname)==1)				reswv=ywave-peakfit	endifendfunction PF_SetPeakColors()	string dfn=winname(0,1)	string df="root:"+dfn+":"	variable jj	nvar numpks=$(df+"numpks"), peak=$(df+"peak")	variable i	if(numpks==0)//jm added 8/2016		abort	endif	For(i=0;i<numpks;i+=1)		jj=i		if((i+1)==peak)			ModifyGraph/w=$dfn rgb($("peak"+num2str(i+1)))=(65535,16385,16385)		else			ModifyGraph/w=$dfn rgb($("peak"+num2str(i+1)))=(0,0,0)		endif	endforendfunction/s PF_BkgdHoldString(dfn)	string dfn	string df="root:"+dfn+":"	string h=""	nvar b0=$(df+"bkgd0"),b1=$(df+"bkgd1"),b2=$(df+"bkgd2"),b3=$(df+"bkgd3"),b4=$(df+"bkgd4"), b5=$(df+"bkgd5"),b6=$(df+"bkgd6")	wave hold=$(df+"hold")	NVAR hasFE = $(df+"hasFE")	h+=num2str((numtype(b0)==2) + (hold[0][0][0]==1)>0)	h+=num2str((numtype(b1)==2) + (hold[1][0][0]==1)>0)	h+=num2str((numtype(b2)==2) + (hold[2][0][0]==1)>0)	h+=num2str((numtype(b3)==2) + (hold[3][0][0]==1)>0)	h+=num2str((numtype(b4)==2) + (hold[4][0][0]==1)>0)       h+=num2str((HasFE==0) + (hold[5][0][0]==1)>0)       h+=num2str((hasFE==0) + (hold[6][0][0]==1)>0)	return hend//sets up hold stringfunction/s PF_HoldString(dfn)	string dfn	string df="root:"+dfn+":"	string h=""	variable i=0,j	wave fp=$(df+"fitparms"), hold=$(df+"hold")	nvar npks=$(df+"numpks")	//background	j=1	do		h+=num2str((numtype(fp[0][j])==2) + (hold[0][j][0]==1)>0)		h+=num2str((numtype(fp[1][j])==2) + (hold[1][j][0]==1)>0)		h+=num2str((numtype(fp[2][j])==2) + (hold[2][j][0]==1)>0)		h+=num2str((numtype(fp[3][j])==2) + (hold[3][j][0]==1)>0)		h+=num2str((numtype(fp[4][j])==2) + (hold[4][j][0]==1)>0)		h+=num2str((numtype(fp[5][j])==2) + (hold[5][j][0]==1)>0)		h+=num2str((numtype(fp[6][j])==2) + (hold[6][j][0]==1)>0)		j+=1	while (j<=npks)		//first pass: go through 		return hend//test fit function evaluationfunction XPSFit(dfn,fitparms,fittype,xx,res)	string dfn	wave fitparms,fittype, xx,res	res=0	string df="root:"+dfn+":"	variable i	nvar hasbkgd=$(df+"hasbkgd"), np=$(df+"numpks")	svar xwvnm=$(df+"xwv")	wave xwv=$xwvnm, xwave=$(df+"xwave"), bkgdFit=$(df+"bkgdFit") //	if(hasBkgd)//		polyflexwv(fitparms,xwave,bkgdFit)		bkgdFit=PF_BkgdFunction(fitparms,numpnts(fittype),x)//	endif	i=0	do		subFunctionwv(fitparms,fittype,xwave,i+1,res)		res/=subFunction0(fitparms,fittype,i+1)		i+=1	while(i<np)	return resendproc testTime()	silent 1; pauseupdate	variable/d ttime=ticks	variable i	for(i=-;i<20;i+=1)		//print i		PF=xpsfit(:PF:fitparms,:PF:fittype,t226_x)	endfor	print (ticks-ttime)/60.15endfunction PF_FitFunction(ww,xx) //need to be in PF folder	wave ww; variable xx	string df=getdatafolder(1)	wave ft=$(df+"fittype")	wave fp=$(df+"fitparms")	wave xwv=$(df+"xwave")	svar ywvname=$(df+"ywv")	svar wvdf=$(df+"wvdf")	wave ywv=$(wvdf+ywvname)	nvar npks=$(df+"numpks")	nvar FEPos=$(df+"FEPos") , FEWidth=$(df+"FEWidth") , hasFE=$(df+"hasFE")	wave convStore=$(df+"convStore")	variable i,nparms=(npks+1)*7	//number of fit parameters	variable npts=numpnts(ywv)	variable/g V_FitIterStart	variable cp=V_FitIterStart-1	variable evWithinX=mod(cp, nparms+1)   	//evaluation # with current value of x	variable isSameX=evWithinX>0	variable g_currPk=floor((evWithinX-1)/7)		//current peak being fit	if(cp==0)	//only executes once per iteration		make/o/n=(npks+1) $(df+"hold1store")		make/o/n=(nparms+1,npks+1) $(df+"Amp0Store")		//print npts,npks+1,nparms+1		make/o/n=(npts,npks+1,nparms+1) $(df+"convStore")		//print npts,npks,nparms	endif	wave hold1Store=$(df+"hold1store")	wave hold=$(df+"hold")	wave amp0store=$(df+"amp0store")	variable ans=0, res=0,holdIs1,parmisNaN,fittingotherpeak, hasConvolved	holdis1=(hold[evWithinX-1]==1)	parmIsNaN=(numtype(fp[evWithinX-1])==2)	hasconvolved=0		//ways to save time:	//  (1) when fitting a "hold=1" parameter, don't recalculate any peaks: all can be taken from first calculation at this x-value	//  (2) when varying peak#n, all other peaks can use stored values	//  (3) normalize peakheight only once for each set of parameters	//  (4) precalculate convolved functions at first x, once for each parameter variation	wave ftft=$(df+"fittype")	if((cp<=nparms))		//precalculate amplitudes for timesaver (3)		amp0store[cp][1,npks]=subfunction0(ww,$(df+"fittype"),q)		i=1		do			if(abs(ft[i])==4)				convstore[][i][cp]=subfunction(ww,$(df+"fittype"),x,i)			endif			i+=1		while(i<=npks)	endif	//print cp,xx,xwv[floor(cp/(nparms+1))],evWithinX,g_currPk,">",ww[0],ww[1],ww[2],ww[3],ww[4],ww[5],ww[6],ww[7],ww[8],ww[9],ww[10],ww[11],ww[12],ww[13]	i=0	do		fittingOtherPeak=(i!=g_currPk)		if(isSameX*(holdIs1+parmIsNaN+fittingOtherPeak))	//timesavers (1) and (2)			//no parameter is varying, recall from storage			res=Hold1Store[i]			//print isSAmeX,holdis1,parmisNaN,">", Hold1Store[i]			else			//calculate for new parameter			if(i==0) 				res=PF_bkgdfunction(ww,ft[0],xx)			else				if(abs(ft[i])==4)					res=convStore[floor(cp/(nparms+1))][i][evwithinX]				//timesaver (4)				else					res=subfunction(ww,$(df+"fittype"),xx,i)				endif				res/=amp0store[evWithinX][i]					//timesaver (3)			endif			//print res		endif		if(evWithinX==0)	//storage for methods (1) and (2)			Hold1Store[i]=res		endif		ans+=res		i+=1	while(i<=npks)	V_FitIterStart+=1	if (hasFE==1)		ans *= ( 1/(exp((xx-ww[5][0])/ww[6][0])+1) )	endif	return ansend function subFunction(fitparms,fittype,xx,pk)	wave fitparms,fittype	variable xx, pk	variable ans,hasSO=fittype[pk]<0	//print pk,fittype[pk],hasSO	variable POS=fitparms[0][pk], AMP=abs(fitparms[1][pk]), LW=abs(fitparms[2][pk]), GW=abs(fitparms[3][pk]), ASYM=abs(fitparms[4][pk]), SPLIT=fitparms[5][pk], RATIO=fitparms[6][pk]	if (abs(fittype[pk])==1)	//lor		ans=AMP*flor(LW,xx-POS)		if (hasSO) 			ans+=RATIO*AMP*flor(LW,xx-POS+SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==2)	//lor_gauss		ans=AMP*fvoigtH(LW,GW,xx-POS)		if (hasSO) 			ans+=RATIO*AMP*fvoigtH(LW,GW,xx-POS+SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==3)	//lor_don		ans=AMP*florDS(LW,ASYM,xx-POS)		if(hasSO) 			ans+=RATIO*AMP*florDS(LW,ASYM,xx-POS+SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==4)	//lor_don_gauss		ans=AMP*fDSConvG(pk,LW,GW,ASYM,xx-POS)		if(hasSO) 			//print " LW,GW,ASYM=",LW,GW,ASYM			ans+=RATIO*AMP*fDSConvG(pk,LW,GW,ASYM,xx-POS+SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==5)	//gauss		ans=AMP*fGauss(GW,xx-POS)		if(hasSO) 			ans+=RATIO*AMP*fGauss(GW,xx-POS+SPLIT)		endif		return ans	endifendfunction subFunctionwv(fp,fittype,xx,pk, ans) //JM utilizes xwave based 8/2016	wave fp,fittype,xx, ans	variable pk	variable hasSO=fittype[pk]<0	variable POS=fp[0][pk], AMP=abs(fp[1][pk]), LW=abs(fp[2][pk]), GW=abs(fp[3][pk]), ASYM=(fp[4][pk]), SPLIT=fp[5][pk], RATIO=fp[6][pk]	if (abs(fittype[pk])==1)	//lor		ans=AMP*flor(LW,xx-POS)		if (hasSO) 			ans+=RATIO*AMP*flor(LW,xx-POS+SPLIT)		endif	endif	if (abs(fittype[pk])==2)	//lor_gauss		ans=AMP*fvoigtH(LW,GW,xx-POS)		if (hasSO) 			ans+=RATIO*AMP*fvoigtH(LW,GW,xx-POS+SPLIT)		endif	endif	if (abs(fittype[pk])==3)	//lor_don		ans=AMP*florDS(LW,ASYM,xx-POS)		if(hasSO) 			ans+=RATIO*AMP*florDS(LW,ASYM,xx-POS+SPLIT)		endif	endif	if (abs(fittype[pk])==4)	//lor_don_gauss		ans=AMP*fDSConvG(pk,LW,GW,ASYM,xx-POS)		if(hasSO) 			//print " LW,GW,ASYM=",LW,GW,ASYM			ans+=RATIO*AMP*fDSConvG(pk,LW,GW,ASYM,xx-POS+SPLIT)		endif	endif	if (abs(fittype[pk])==5)	//gauss		ans=AMP*fGauss(GW,xx-POS)		if(hasSO) 			ans+=RATIO*AMP*fGauss(GW,xx-POS+SPLIT)		endif	endifendfunction subFunction0(fp,fittype,pk)	variable pk	wave fp,fittype	variable hasSO= fittype[pk]<0	variable ans//*-*		variable POS=fp[0][pk], AMP=abs(fp[1][pk]), LW=abs(fp[2][pk]), GW=abs(fp[3][pk]), ASYM=(fp[4][pk]), SPLIT=fp[5][pk], RATIO=fp[6][pk]	if (abs(fittype[pk])==1)	//lor		ans=1		if (hasSO) 			ans+=RATIO*flor(LW,SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==2)	//lor_gauss		ans= fvoigtH(LW,GW,0)		if(hasSO) 			ans+= RATIO*fvoigtH(LW,GW,SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==3)	//lor_don		ans= florDS(LW,ASYM,0)		if (hasSO) 			ans+=RATIO*florDS(LW,ASYM,SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==4)	//lor_don_gauss		ans=fDSConvG(pk,LW,GW,ASYM,0)		if(hasSO) 			ans+=RATIO*fDSConvG(pk,LW,GW,ASYM,SPLIT)		endif		return ans	endif	if (abs(fittype[pk])==5)	//gauss		ans=1		if(hasSO) 			ans+=RATIO*fGauss(GW,SPLIT)		endif		return ans	endifend //returns true if strings are equal; ignores casefunction streq(s1,s2)	string s1,s2	return  cmpstr(lowerstr(s1),lowerstr(s2))==0end//called from marqueefunction PF_AddBkgdRegion():graphmarquee	return PF_addBkRg("MRQ")endfunction PF_AddBkRg(type)	string type//="MRQ" //"CSR" means from cursors, "MRQ"=from marquee	string dfn=winname(0,1)	string df="root:"+dfn+":"	svar an=$(df+"axName")	variable x0,x1,p0,p1	if (cmpstr(type,"CSR")==0)		x0=min(hcsr(a,dfn),hcsr(b,dfn))		x1=max(hcsr(a,dfn),hcsr(b,dfn))		print x0,x1	else		getmarquee/k $an,bottom		print v_flag,v_left,v_right		x0=min(v_left,v_right)		x1=max(v_left,v_right)		print x0,x1	endif	svar ywv=$(df+"ywv"),xwv=$(df+"xwv")	wave bk=$(df+"bkgdrgn"), bw=$(df+"bkgdweight")	wave yw=$ywv	if(strlen(xwv))		findlevel/q $(df+"xwv"),x0		p0=v_levelx		findlevel/q $(df+"xwv"),x1		p1=v_levelx	else		p0=x2pnt(yw,x0)		p1=x2pnt(yw,x1)	endif	print p0,p1	bk[min(p0,p1),max(p0,p1)]=yw	bw[min(p0,p1),max(p0,p1)]=1	PF_appwv(dfn,df+"xwave",df+nameofwave(bk))	ModifyGraph mode(bkgdRgn)=4,marker(bkgdRgn)=5	PF_DoBkgdGuess(dfn) end//checks if wave is already there before appending//checks if xw exists before usingfunction PF_appwv(dfn,xw,yw)	string dfn,xw,yw	string df="root:"+dfn+":"	variable nl=numinlist(yw,":")	string ywt=lowerstr(getstrfromlist(yw,nl-1,":"))  //convert string to tracename	string ss=lowerstr(tracenamelist("",";",1))	svar axname=$(df+"axname")	if (strsearch(ss,ywt+";",0)<0) 		if (strlen(xw)==0)			appendtograph/w=$dfn/l=$axname $yw		else			appendtograph/w=$dfn/l=$axname $yw vs $xw		endif	endif	end//like PF_appwv, but force to left axisfunction PF_appwvleft(dfn,xw,yw)	string dfn,xw,yw	string df="root:"+dfn+":"	variable nl=numinlist(yw,":")	string ywt=lowerstr(getstrfromlist(yw,nl-1,":"))  //convert string to tracename	if (strsearch(lowerstr(tracenamelist("",";",1)),ywt,0)<0) 		if (strlen(xw)==0)			appendtograph/w=$dfn/l=left $yw		else			appendtograph/w=$dfn/l=left $yw vs $xw 		endif	endif	end//checks if wave is there before removingfunction PF_remwv(dfn,yw)	string dfn,yw	variable nl=numinlist(yw,":")	string ywt=lowerstr(getstrfromlist(yw,nl-1,":"))  //convert string to tracename	if (strsearch(lowerstr(tracenamelist("",";",1)),ywt,0)>=0) 		removefromgraph/w=$dfn $ywt	endif	end//checks if cursors are on wave like ywv, returns "1" if they are, "0" otherwise, and gives alertFunction PF_CheckCursors()	string dfn=winname(0,1)	string df="root:"+dfn+":"	svar ywv=$(df+"ywv")	nvar np=$(df+"npnts")	variable npA=numpnts(csrWaveRef(A,dfn)),npB=numpnts(csrWaveRef(B,dfn))	//print wn, ywv, np, npa, npb	variable ans=((npA==np) * (npB==np)	if (ans)		return 1	else		doAlert  0, "Sorry, you must have 2 cursors on '"+ywv+"' or a wave like it"		return 0	endifendFunction PF_PanelButtons(ctrlName) : ButtonControl	String ctrlName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	strswitch(ctrlName)	//////background/////////		Case "crsr2rgn":			if (PF_checkCursors()) 				PF_addBkRg("CSR")			else 				print "no cursors"			endif			break		Case "clrRgn":			PF_DoClearRegions(dfn)			break		Case "BkgdGuess":			PF_DoBkgdGuess(dfn)			break	////////peak////////////		Case "csr2newpk":			PF_DoNewPeak("CSR")			break		Case "csr2thispk":			PF_DoThisPeak(hcsr(a),hcsr(b))			break		Case "killpk":			PF_doKillPk(dfn)			break		Case "guessprefs":			PF_DoGuessPrefs(dfn)			break	endswitch	EndFunction PF_DoClearRegions(dfn)	string dfn	string df="root:"+dfn+":"	wave bkgdRgn=$(df+"bkgdRgn")	bkgdRgn=nan	wave bkgdWeight=$(df+"bkgdWeight")	bkgdWeight=0endfunction PF_DoBkgdGuess(dfn)	string dfn	string df="root:"+dfn+":"	dfref dfSav=GetDataFolderDFR()	setdatafolder $df	wave fittype=$(df+"fittype"),fitparms=$(df+"fitparms") 	wave bkgdFit=$(df+"bkgdFit")	wave xwave=$(df+"xwave")	variable nterms=fittype[0]	svar xwv=$(df+"xwv")	doWindow/F $(dfn)	PF_remwv(dfn,df+"bkgdfit")	variable hasX=strlen(xwv) >0	if (nterms>1)		string cmd="CurveFit/X=1/NTHR=0 "				if (nterms==2)			cmd +="line,"		else			cmd +="poly " + num2str(nterms) +"," //In Igor poly3 is 2nd order (x^2 but has 3 coeffs) 		endif		cmd+=df+"bkgdRgn /X="+df+"xwave /w="+df+"bkgdWeight /D="+df+"bkgdFit "		print "--------\r",cmd		 		execute cmd		wave w_coef=$(df+"w_coef")		bkgdFit=poly(w_coef,x) 		wave fitparms=$(df+"fitparms")		fitparms[0,numpnts(w_coef)-1][0]=w_coef		if(numpnts(w_coef)<=6)			fitparms[numpnts(w_coef),][0]=nan		endif	else		//offset only; just average the points		wavestats/q bkgdrgn		variable temp=v_avg		bkgdfit=temp		fitparms[0][0]=temp		fitparms[1,][0]=nan	endif	PF_appwv(dfn,df+"xwave",df+"bkgdfit")	ModifyGraph/w=$dfn lstyle(bkgdFit)=1,rgb(bkgdFit)=(0,0,65535)	SetDataFolder dfSav	updatePFPanel(dfn)endfunction PF_BkgdFunction(ww,nt,xx) //ww=fitparameters, nt=number of times, xx =ndependent variable	wave ww	variable nt,xx	variable res=0	variable i=1	do		res+=ww[nt-i]		if (i<nt)			res*=xx		endif		i+=1	while (i<=nt)	return resendFunction polyflexwv(ww,xx,res) //jm add 8/2016	wave ww, xx,res	res=0	string cmd=getwavesdatafolder(res,2)+"=0"	variable i	for(i=0;i<dimsize(ww,0);i+=1)		if(numtype(ww[i])==0)//ww[i] is a real number			//res+=ww[i]*xx^i			cmd+="+"+num2str(ww[i])+"*"+getwavesdatafolder(xx,2)+"^"+num2str(i)		endif	endfor	//print cmd	execute cmdendFunction PF_SelectBkgd(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	wave wv=$(df+"fittype")	wv[0]=popnum	updatePFPanel(dfn)EndFunction PF_FECheckBoxProc(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]		string df="root:"+dfn+":"	nvar hasFE=$(df+"hasFE")	print hasFE, checked	hasFE=checked	updatePFPanel(dfn)Endfunction PF_DoKillPk(dfn)		string dfn	string df="root:"+dfn+":"	nvar numpks=$(df+"numpks"), peak=$(df+"peak")	if (numpks >0)		doalert  1, "Are you sure you want to kill peak #"+num2str(peak)+"?"		if (v_flag==1)			DeletePoints/M=1 peak,1, $(df+"fitparms")			DeletePoints/M=1 peak,1, $(df+"hold")			DeletePoints/M=1 peak,1, $(df+"minmax")			DeletePoints peak,1, $(df+"fittype")			PF_remwv(dfn,df+"peak"+num2str(peak))			numpks-=1			updatePFPanel(dfn)		endif	endifendFunction PF_PanelControls(ctrlName) : ButtonControl	string ctrlName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	strswitch(ctrlName)		case "initButton":			variable yn=PF_AreYouSure()			if (yn==1)				MakePFVariables(dfn)				MakePFWaves(dfn)				updatePFPanel(dfn)			endif			break		case "FitSpectrum":			PF_DoFitChannel(dfn,0)			break		case "FitReport":			PF_DoFitReport(dfn)			break		case "fitspectra":			PF_DoFitChannels(dfn)			break		case "fit2hist":			PF_DoFit2History(dfn)			break		case "killHist":			PF_DoKillHistory(dfn)			break		case "hist2fit":			PF_DoHistory2Fit(dfn)			break		case "SeriesReport":			 PF_DoSeriesReport(dfn)			 break		case "animate":			nvar ch0=$(df+"ch0"), ch1=$(df+"ch1")			 PF_DoAnimate(ch0,ch1)			 break		case "showData":			PF_DoDataWindowProc(dfn)			break		case "showHistory":			PF_DoHistoryWindowProc(dfn)			break		endswitchendfunction PF_AddNewPeak():graphmarquee	PF_doNewPeak("MRQ")end//should not be in :PFfunction PF_DoNewPeak(type)	string type   //CSR or MRQ	string dfn=winname(0,1)	string df="root:"+dfn+":"	if (cmpstr(type,"CSR")==0)		PF_CheckCursors()	endif	nvar numpks=$(df+"numpks"),peak=$(df+"peak")	svar axname=$(df+"axname")	numpks+=1	wave fitparms=$(df+"fitparms"),hold=$(df+"hold"),minmax=$(df+"minmax"),fittype=$(df+"fittype") 	redimension/n=(7,numpks+1) fitparms	redimension/n=(7,numpks+1,3) hold	redimension/n=(7,numpks+1,2) minmax	redimension/n=(numpks+1) fittype	//----make some default parameters for relative peak constraint	print numpks	if(numpks==1)		hold[][numpks][2]=2  //default peak 1 is relative to peak 2	else		hold[][numpks][2]=numpks-1	endif	hold[0][numpks][1]=0	hold[1,6][numpks][1]=1	//----	minmax[][numpks][]=nan	peak=numpks	if (cmpstr(type,"CSR")==0)    //csrs on center, center+halfwidth		PF_doThisPeak(hcsr(a),hcsr(b))	else		getmarquee/k $(axname),bottom //marquee on entire peak (lower left to lower right)		variable mn=min(v_left,v_right), mx=max(v_left,v_right)		PF_doThispeak((mx+mn)/2,(mx+mn)/2+(mx-mn)/4)	endifend//should not be in :PF//ha=center of peak//hb=offset from ha by halfwidthfunction PF_DoThisPeak(ha,hb)	variable ha,hb	string dfn=winname(0,1)	string df="root:"+dfn+":"	PF_AskPeakType(dfn)	nvar pkty=$(df+"nextPkAdd")	nvar numpks=$(df+"numpks")	if (!numpks)		abort "Cannot execute because no current peak exists"	endif	wave fp=$(df+"fitparms"), ft=$(df+"fittype"), bkgdfit=$(df+"bkgdfit")	nvar peak=$(df+"peak"), lwg=$(df+"LWGuess"), ag=$(df+"ASYMguess"), sg=$(df+"splitguess"), rg=$(df+"ratioGuess")	fp[0][peak]=ha	wave yw=$(df+"SingleChannel")//$(wvdf+ywv)	variable pa=x2pnt(yw,ha)							//POS//	print ha,pa	if (numtype(bkgdfit[pa])==2)  						//if NAN		fp[1][peak]=yw[pa] 								//AMP	else			fp[1][peak]=yw[pa]-bkgdfit[pa]  					//AMP - BKGD	endif	ft[peak]=pkty	variable hasSO=(pkty<0)	if(abs(pkty)==1) //lor		fp[2][peak]=2*abs(hb-ha)						//LW		fp[3][peak]=nan								//GW		fp[4][peak]=nan								//ASYM		if(hasSO)			fp[5][peak]=sg								//split			fp[6][peak]=rg								//ratio		else			fp[5][peak]=nan											fp[6][peak]=nan										endif	endif	if(abs(pkty)==2) //lor-gauss		fp[2][peak]=lwg									//LW		fp[3][peak]=2*abs(hb-ha)						//GW		fp[4][peak]=nan								//ASYM		if(hasSO)			fp[5][peak]=sg								//split			fp[6][peak]=rg								//ratio		else			fp[5][peak]=nan											fp[6][peak]=nan										endif	endif	if(abs(pkty)==3) //lor-don		fp[2][peak]=2*abs(hb-ha)						//LW		fp[3][peak]=nan								//GW		fp[4][peak]=ag									//ASYM		if(hasSO)			fp[5][peak]=sg								//split			fp[6][peak]=rg								//ratio		else			fp[5][peak]=nan											fp[6][peak]=nan										endif	endif	if(abs(pkty)==4) //lor-don-gauss		fp[2][peak]=lwg									//LW		fp[3][peak]=2*abs(hb-ha)						//GW		fp[4][peak]=ag									//ASYM		if(hasSO)			fp[5][peak]=sg								//split			fp[6][peak]=rg								//ratio		else			fp[5][peak]=nan											fp[6][peak]=nan										endif	endif	if(abs(pkty)==5) //gauss		fp[2][peak]=nan								//LW		fp[3][peak]=2*abs(hb-ha)						//GW		fp[4][peak]=nan								//ASYM		if(hasSO)			fp[5][peak]=sg								//split			fp[6][peak]=rg								//ratio		else			fp[5][peak]=nan											fp[6][peak]=nan										endif	endif	if(abs(pkty)==6) //gstep	endif	if(abs(pkty)==7) //lshape	endif	updatePFPanel(dfn)end//should not be in PFfunction PF_AskPeakType(dfn)	string dfn	variable pt, hasSO	string df="root:"+dfn+":"		prompt pt,"Peak Type To Add",popup "Lor;Lor_Gauss;Lor_Doniach;Lor_Don_Gauss;Gaussian;Gauss Step;Lineshape"	prompt hasSO,"Has Spin-orbit splitting?", popup "No;Yes"	doprompt "Peak type:", pt, hasSO	if (V_Flag)		abort									endif	nvar nextPkAdd=$(df+"nextPkAdd")	nextPkAdd=pt	if (hasSO==2)		nextPkAdd*=-1	endifend	//when user requests new peak to editfunction PF_PeakVar(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	nvar oldpeak=oldpeak	if (varnum!=oldpeak)		updatePFPanel(dfn)		oldpeak=varnum	endifEnd//when user changes the current peak typeFunction PF_ChangeType(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	PF_doChangeType(dfn,popnum)Endfunction PF_DoChangeType(dfn,pkty)	string dfn	variable  pkty	string df="root:"+dfn+":"	nvar peak=$(df+"peak"), LWguess=$(df+"LWguess"),GWGuess=$(df+"GWGuess")	nvar ASYMguess=$(df+"ASYMguess")	wave fittype=$(df+"fittype"), fitparms=$(df+"fitparms")	fittype[peak]=pkty	if(pkty==1) //lor		fitparms[3][peak]=nan								//GW		fitparms[4][peak]=nan								//ASYM	endif	if(pkty==2) //lor-gauss		if(numtype(fitparms[2][peak])==2)			fitparms[2][peak]=LWguess						//LW		endif		if(numtype(fitparms[3][peak])==2)			fitparms[3][peak]=GWGuess					//GW		endif		fitparms[4][peak]=nan								//ASYM	endif	if(pkty==3) //lor-don		if(numtype(fitparms[2][peak])==2)			fitparms[2][peak]=LWguess						//LW		endif		fitparms[3][peak]=nan								//GW		if(numtype(fitparms[4][peak])==2)			Fitparms[4][peak]=ASYMguess						//LW		endif	endif	if(pkty==4) //lor-don-gauss		if(numtype(fitparms[2][peak])==2)			fitparms[2][peak]=LWguess						//LW		endif		if(numtype(fitparms[3][peak])==2)			fitparms[3][peak]=GWGuess					//GW		endif		if(numtype(fitparms[4][peak])==2)			fitparms[4][peak]=ASYMguess						//LW		endif	endif	if(pkty==5) //gauss		fitparms[2][peak]=nan								//LW		if(numtype(fitparms[3][peak])==2)			fitparms[3][peak]=GWGuess					//GW		endif		fitparms[4][peak]=nan								//ASYM	endif	if(pkty==6) //gstep	endif	if(pkty==7) //lshape	endif	updatePFPanel(dfn)endFunction PF_PanelEditParms(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	wave fp=$(df+"fitparms")	nvar pk=$(df+"peak"),np=$(df+"numpks")	if(np>=1)			strswitch(ctrlName)			case "editPOS":				fp[0][pk]=varNum				break			case "editAMP":				fp[1][pk]=varNum				break			case "editLW":				fp[2][pk]=varNum				break			case "editGW":				fp[3][pk]=varNum				break			case "editASYM":				fp[4][pk]=varNum				break			case "editSPLIT":				fp[5][pk]=varNum			case "editRATIO":				fp[6][pk]=varNum		endswitch	endif	updateXPSfit(dfn,pk)Endfunction PF_DoGuessPrefs(dfn)	string dfn	string df="root:"+dfn+":"	variable, lg, gg, ag, sg, rg	nvar LWGuess=$(df+"LWGuess"),GWGuess=$(df+"GWGuess"), ASYMguess=$(df+"ASYMguess"),SPLITguess=$(df+"SPLITguess"),RATIOguess=$(df+"RATIOguess")	lg=LWGuess	gg=GWGuess	ag=ASYMguess	sg=SPLITguess	rg=RATIOguess	prompt lg,"Default LW value"	prompt gg, "Default GW value"	prompt ag,"Default ASYM value"	prompt sg,"Default SPLIT value"	prompt rg,"Default RATIO value"	DoPrompt "Set default values:",lg,gg,ag,sg,rg	if (V_Flag)		abort									endif	LWGuess=lg	GWGuess=gg	ASYMguess=ag	SPLITguess=sg	RATIOguess=rgendfunction PF_DoFitChannel(dfn,quiet)	string dfn	variable quiet	string df="root:"+dfn+":"	string cmd	nvar v_FitIterStart=$(df+"v_FitIterStart"), numPks=$(df+"numPks"),isSeries=$(df+"isSeries")	variable hasConstr,i	svar ywv=$(df+"ywv"), wvdf=$(df+"wvdf")	wave constraints=$(df+"constraints"), fitparms=$(df+"fitparms")	dfref dfSav=GetDataFolderDFR()	setdatafolder $df	dowindow $dfn	PF_MakeConstraints(dfn)	cmd="FuncFit/Q"//	hasConstr=selectnumber(numpnts(constraints)>0,1,0)//orginal	hasConstr=selectnumber(numpnts(constraints)>0,0,1)	if (hasConstr)		cmd+="/c"	endif	For(i=0;i<numPks;i+=1)		wave peak=$(df+"peak"+num2str(i+1))		peak=nan	endfor	if(quiet) 		pauseupdate	endif	cmd+="/h=\""+PF_BkgdHoldString(dfn)+PF_HoldString(dfn)+"\""	if (isSeries)		cmd+=" PF_FitFunction "+df+"fitparms "+df+"singlechannel"	else		cmd+=" PF_FitFunction "+df+"fitparms "+wvdf+ywv 	endif		cmd+=" /x=" +df+"xwave"	cmd+=" /D="+df+"peakfit/R"	if(hasConstr)		cmd+="/c="+df+"constraints"	endif	print cmd	variable tstart=datetime	execute cmd	resumeupdate//make LW, GW, ASYM positive//*-*	fitparms[2,3][1,]=abs(fitparms[p][q])	if(!quiet)		updatePFPanel(dfn)	endif	print "Fittime=",datetime-tstart," sec"	setdatafolder dfSavendfunction PF_DoFitChannels(dfn) 	string dfn	string df="root:"+dfn+":"	nvar channel=$(df+"channel"), nchan=$(df+"nchan")	variable cstart=channel, cend=nchan-1	prompt cstart, "first:"	prompt cend, "last:"	Doprompt "Channels to fit", cstart,cend	if (V_Flag)		abort									endif	variable c=cstart, step=1, condn	if(cend<cstart)		step=-1	endif	do		print "Channel=",c		channel=c		PF_CopyChannel(dfn, c)		PF_DoFitChannel(dfn,1)		PF_doFit2History(dfn)		PF_calcHistory(dfn)		c+=step		if(cend<cstart)			condn=(c>=cend)		else			condn=(c<=cend)		endif	while(condn)	updatepfpanel(dfn)endfunction PF_MakeConstraints(dfn)	string dfn	string df="root:"+dfn+":"	nvar numpks=$(df+"numpks")	make/t/o/n=(14*numpks) $(df+"constraints")	wave constraints=$(df+"constraints")	variable pk=1, pk1, k0, k1, v,j,nc=0,isNan		wave fitparms=$(df+"fitparms"), hold=$(df+"hold"), minmax=$(df+"minmax")	string s, op, cmd	do		j=0		do			isNan=numtype(fitparms[j][pk])==2			if((hold[j][pk][0]==3)*(!isNan))	//relative to				k0=j+(pk)*7				pk1=hold[j][pk][2]				k1=j + (pk1) * 7				v=hold[j][pk][1] 				if ((j==0)+(j==5)) //POS and SPLIT are additive, others multiplicative					op="+"//"+"				else					op="*"				endif				s="k"+num2str(k0) + "<" + num2str(v) + op + "k"+num2str(k1)				constraints[nc]=s				s="k"+num2str(k0) + ">" + num2str(v) + op + "k"+num2str(k1)				constraints[nc+1]=s				if ((j==0)+(j==5))		//force constraint on parms					fitparms[j][pk]=fitparms[j][pk1] +v//+ v				else					fitparms[j][pk]=fitparms[j][pk1] * v				endif				nc+=2			endif			if((hold[j][pk][0]==2)*(!isNan))	//between				if (numtype(minmax[j][pk][0])==0) 	//low value					k0=j+(pk)*7					v=minmax[j][pk][0]					s="k"+num2str(k0)+">" +num2str(v)					constraints[nc]=s					if(fitparms[j][pk]<v)	//force constraint on parms						fitparms[j][pk]=v					endif					nc+=1				endif				if (numtype(minmax[j][pk][1])==0) 	//high value					k0=j+(pk)*7					v=minmax[j][pk][1]					s="k"+num2str(k0)+"<" +num2str(v)					constraints[nc]=s					if(fitparms[j][pk]>v)	//force constraint on parms						fitparms[j][pk]=v					endif					nc+=1				endif			endif			j+=1		while(j<7)		pk+=1	while(pk<=numpks)	redimension/n=(nc) constraintsendFunction MakePFpanel(dfn) 	string dfn	string df="root:"+dfn+":"	if (WinType(dfn+"_Panel")==0)		NewPanel /W=(651,456,1223,797) as dfn+"_Panel"	endif	DoWindow/F/C $(dfn+"_Panel")	ShowTools/A	SetDrawLayer UserBack	SetDrawEnv fname= "Times",fsize= 10	SetDrawEnv save	DrawText 134,175,"Low"	DrawText 215,175,"High"	DrawText 306,175,"Hold?"	DrawText 372,175,"rel. to peak #"	SetDrawEnv fillfgc= (32768,54615,65535)	DrawRect 4,16,435,102	SetDrawEnv fillfgc= (65535,54607,32768)	DrawRect 4,110,435,325	DrawRect 481,236,483,236	SetDrawEnv fillfgc= (49163,65535,32768)	DrawRect 441,97,556,298	DrawRect 0,57,0,56	SetDrawEnv fname= "Monaco"	DrawText 115,175,"Constraint Mode"	SetDrawEnv fillfgc= (65535,16385,16385)	DrawRect 435,110,4,136	SetDrawEnv fstyle= 2	DrawText 248,93,"checkbox means fix this parameter"	SetDrawEnv fillfgc= (32768,54615,65535)	DrawRect 441,16,556,86	Button initButton,pos={448,103},size={100,20},proc=PF_PanelControls,title="initialize",fSize=10	PopupMenu background,pos={12,26},size={84,20},proc=PF_selectBkgd,title="type"	PopupMenu background,mode=1,popvalue="Offset",value= #"\"Offset;Line;Poly-2nd;Poly-3rd;Poly-4th\""	Button crsr2rgn,pos={126,23},size={110,20},proc=PF_PanelButtons,title="Crsrs -> Region",fSize=10	Button clrRgn,pos={238,23},size={90,20},proc=PF_PanelButtons,title="ClearRegions",fSize=10	Button BkgdGuess,pos={331,23},size={90,20},proc=PF_PanelButtons,title="Guess Bkgd",fSize=10	SetVariable channel,pos={276,115},size={100,15},proc=PF_SetVarChannel,title="channel"	SetVariable channel,fSize=9,limits={0,99,1},value=$(df+"channel"),fSize=10	SetVariable peak,pos={80,114},size={80,18},proc=PF_PeakVar,title="peak",fSize=10	SetVariable peak,limits={1,2,1},value= $(df+"peak")	SetVariable editPOS,pos={10,177},size={100,15},proc=PF_PanelEditParms,title="POS",fSize=9,disable=1	SetVariable editPOS,limits={-inf,inf,0.1},value=$(df+"POS")	SetVariable editAMP,pos={9,197},size={100,15},proc=PF_PanelEditParms,title="AMP",fSize=9,disable=1	SetVariable editAMP,value=$(df+"AMP")	SetVariable editLW,pos={9,221},size={100,15},proc=PF_PanelEditParms,title="LW",fSize=9,disable=1	SetVariable editLW,limits={-inf,inf,0.1},value=$(df+"LW")	SetVariable editGW,pos={10,240},size={100,15},proc=PF_PanelEditParms,title="GW",fSize=9,disable=1	SetVariable editGW,limits={-inf,inf,0.1},value=$(df+"GW")	SetVariable editASYM,pos={9,260},size={100,15},disable=1,proc=PF_PanelEditParms,title="ASYM"	SetVariable editASYM,fSize=9,limits={-inf,inf,0.02},value=$(df+"ASYM")	SetVariable editSPLIT,pos={9,285},size={100,15},disable=1,proc=PF_PanelEditParms,title="SPLIT"	SetVariable editSPLIT,fSize=9,limits={-inf,inf,0.1},value=$(df+"SPLIT")	SetVariable editRATIO,pos={9,304},size={100,15},disable=1,proc=PF_PanelEditParms,title="RATIO"	SetVariable editRATIO,fSize=9,limits={-inf,inf,0.05},value=$(df+"RATIO")	PopupMenu POShold,pos={116,175},size={96,20},proc=PF_SetParmMenu	PopupMenu POShold,mode=1,popvalue="Free           ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	PopupMenu AMPhold,pos={115,194},size={96,20},proc=PF_SetParmMenu	PopupMenu AMPhold,mode=1,popvalue="Free           ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	PopupMenu LWHold,pos={115,219},size={96,20},proc=PF_SetParmMenu	PopupMenu LWHold,mode=1,popvalue="Free           ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	PopupMenu GWhold,pos={115,238},size={94,20},proc=PF_SetParmMenu	PopupMenu GWhold,mode=2,popvalue="Fixed         ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	PopupMenu ASYMhold,pos={115,257},size={96,20},disable=1,proc=PF_SetParmMenu	PopupMenu ASYMhold,mode=1,popvalue="Free           ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	PopupMenu SPLIThold,pos={115,283},size={96,20},disable=1,proc=PF_SetParmMenu	PopupMenu SPLIThold,mode=1,popvalue="Free           ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	PopupMenu RATIOhold,pos={115,302},size={96,20},disable=1,proc=PF_SetParmMenu	PopupMenu RATIOhold,mode=1,popvalue="Free           ",value= #"\"Free           ;Fixed         ;Between;the value from peak #...\""	SetVariable ampRelPeak,pos={298,197},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable ampRelPeak,fSize=9,limits={1,inf,1},value=$(df+"ampRelPeak")	SetVariable LWRelPeak,pos={298,223},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable LWRelPeak,fSize=9,limits={1,inf,1},value=$(df+"LWRelPeak")	SetVariable GWRelPeak,pos={298,242},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable GWRelPeak,fSize=9,limits={1,inf,1},value=$(df+"GWRelPeak")	SetVariable ASYMRelPeak,pos={298,260},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable ASYMRelPeak,fSize=9,limits={1,inf,1},value=$(df+"ASYMRelPeak")	SetVariable SPLITRelPeak,pos={298,286},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable SPLITRelPeak,fSize=9,limits={1,inf,1},value=$(df+"SPLITRelPeak")	SetVariable RATIORelPeak,pos={298,303},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable RATIORelPeak,fSize=9,limits={1,inf,1},value=$(df+"RATIORelPeak")	SetVariable posRelVal,pos={351,177},size={75,15},disable=1,proc=PF_SetConstraintParms,title="plus  "	SetVariable posRelVal,fSize=9,value=$(df+"posRelVal")	SetVariable ampRelVal,pos={351,197},size={75,15},disable=1,proc=PF_SetParms,title="times"	SetVariable ampRelVal,fSize=9,value=$(df+"ampRelVal")	SetVariable LWRelVal,pos={351,223},size={75,15},disable=1,proc=PF_SetParms,title="times"	SetVariable LWRelVal,fSize=9,value=$(df+"LWRelVal")	SetVariable GWRelVal,pos={351,242},size={75,15},disable=1,proc=PF_SetParms,title="times"	SetVariable GWRelVal,fSize=9,value=$(df+"GWRelVal")	SetVariable ASYMRelVal,pos={351,259},size={75,15},disable=1,proc=PF_SetParms,title="times"	SetVariable ASYMRelVal,fSize=9,value=$(df+"ASYMRelVal")	SetVariable SPLITRelVal,pos={350,286},size={75,15},disable=1,proc=PF_SetParms,title="plus  "	SetVariable SPLITRelVal,fSize=9,value=$(df+"SPLITRelVal")	SetVariable RATIORelVal,pos={350,303},size={75,15},disable=1,proc=PF_SetParms,title="times"	SetVariable RATIORelVal,fSize=9,value= $(df+"RATIORelVal")	SetVariable POSlo,pos={208,177},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable POSlo,fSize=9,value=$(df+"POSlo")	SetVariable AMPlo,pos={208,197},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable AMPlo,fSize=9,value=$(df+"AMPlo")	SetVariable LWlo,pos={208,221},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable LWlo,fSize=9,value=$(df+"LWlo")	SetVariable GWlo,pos={208,240},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable GWlo,fSize=9,value= $(df+"GWlo")	SetVariable ASYMlo,pos={208,260},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable ASYMlo,fSize=9,value= $(df+"ASYMlo")	SetVariable SPLITlo,pos={208,285},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable SPLITlo,fSize=9,value= $(df+"SPLITlo")	SetVariable RATIOlo,pos={208,304},size={75,15},disable=1,proc=PF_SetParms,title="Lo"	SetVariable RATIOlo,fSize=9,value= $(df+"RATIOlo")	SetVariable POShi,pos={298,177},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable POShi,fSize=9,value= $(df+"POShi")	SetVariable AMPhi,pos={297,197},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable AMPhi,fSize=9,value= $(df+"AMPhi")	SetVariable LWhi,pos={297,221},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable LWhi,fSize=9,value= $(df+"LWhi")	SetVariable GWhi,pos={297,240},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable GWhi,fSize=9,value= $(df+"GWhi")	SetVariable ASYMhi,pos={296,260},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable ASYMhi,fSize=9,value= $(df+"ASYMhi")	SetVariable SPLIThi,pos={296,285},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable SPLIThi,fSize=9,value= $(df+"SPLIThi")	SetVariable RATIOhi,pos={296,304},size={75,15},disable=1,proc=PF_SetParms,title="Hi"	SetVariable RATIOhi,fSize=9,value= $(df+"RATIOhi")	Button FitSpectrum,pos={449,135},size={100,20},proc=PF_PanelControls,title="Fit Spectrum",fSize=10	Button fitspectra,pos={449,178},size={100,20},proc=PF_PanelControls,title="Fit Spectra...",fSize=10	Button csr2newpk,pos={9,138},size={105,20},proc=PF_PanelButtons,title="Csrs->New Peak",fSize=10	Button killpk,pos={207,138},size={90,20},proc=PF_PanelButtons,title="Kill Peak"	SetVariable bkgd1,pos={12,66},size={90,15},disable=1,proc=PF_editBkgdProc,title="1"	SetVariable bkgd1,fSize=9,value= $(df+"bkgd1")	SetVariable bkgd2,pos={12,81},size={90,15},disable=1,proc=PF_editBkgdProc,title="2"	SetVariable bkgd2,fSize=9,value= $(df+"bkgd2")	SetVariable bkgd3,pos={129,51},size={90,15},disable=1,proc=PF_editBkgdProc,title="3"	SetVariable bkgd3,fSize=9,value= $(df+"bkgd3")	SetVariable bkgd4,pos={129,66},size={90,15},disable=1,proc=PF_editBkgdProc,title="4"	SetVariable bkgd4,fSize=9,value= $(df+"bkgd4")	SetVariable bkgd0,pos={12,51},size={90,15},proc=PF_editBkgdProc,title="0",fSize=9	SetVariable bkgd0,value= $(df+"bkgd0")	CheckBox fix0,pos={103,51},size={16,14},proc=PF_SetFixedFcn,title="",value= 0	CheckBox fix1,pos={103,66},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fix1,value= 0	CheckBox fix2,pos={103,82},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fix2,value= 0	CheckBox fix3,pos={220,52},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fix3,value= 0	CheckBox fix4,pos={220,67},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fix4,value= 0	CheckBox fix5,pos={220,82},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fix5,value= 0	SetVariable bkgd5,pos={129,81},size={90,15},disable=1,proc=PF_editBkgdProc,title="5"	SetVariable bkgd5,fSize=9,value= $(df+"bkgd5")	SetVariable bkgd6,pos={246,51},size={90,15},disable=1,proc=PF_editBkgdProc,title="6"	SetVariable bkgd6,fSize=9,value= $(df+"bkgd6")	CheckBox fix6,pos={338,51},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fix6,value= 0	ValDisplay valdisp0,pos={15,114},size={61,17},title="#peaks",fSize=12	ValDisplay valdisp0,limits={0,0,0},barmisc={0,1000},value= #(df+"numpks")	Button csr2thispk,pos={115,138},size={90,20},proc=PF_PanelButtons,title="Csrs -> Peak",fSize=10	Button guessprefs,pos={299,138},size={90,20},proc=PF_PanelButtons,title="GuessPrefs",fSize=10	Button fit2hist,pos={449,197},size={100,20},proc=PF_PanelControls,title="Fit --> History",fSize=10	Button hist2fit,pos={449,235},size={100,20},proc=PF_PanelControls,title="Fit <-- History",fSize=10	Button fitReport,pos={449,154},size={100,20},proc=PF_PanelControls,title="Fit Report",fSize=10	Button SeriesReport,pos={449,254},size={100,20},proc=PF_PanelControls,title="Series Report",fSize=10	PopupMenu thispktyp,pos={161,113},size={111,20},proc=PF_changetype,title="Type"	PopupMenu thispktyp,mode=2,popvalue="Lor_Gauss",value= #"\"Lor;Lor_Gauss;Lor_Doniach;Lor_Don_Gauss;Gaussian;Gauss Step;Lineshape\""	SetVariable posRelPeak,pos={298,177},size={50,15},disable=1,proc=PF_SetParms,title=" "	SetVariable posRelPeak,fSize=9,limits={1,inf,1},value= $(df+"posRelPeak")	CheckBox FECheckBox,pos={490,25},size={53,14},proc=PF_FECheckBoxProc,title="Has FE?"	CheckBox FECheckBox,value= 0	SetVariable FEPos,pos={445,45},size={90,15},disable=1,proc=PF_editBkgdProc,title="Pos"	SetVariable FEPos,fSize=9,value= $(df+"FEPos")	CheckBox fixFEPOS,pos={538,46},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fixFEPOS,value= 0	CheckBox fixFEWid,pos={538,63},size={16,14},disable=1,proc=PF_SetFixedFcn,title=""	CheckBox fixFEWid,value= 0	SetVariable FEWidth,pos={445,63},size={90,15},disable=1,proc=PF_editBkgdProc,title="Width"	SetVariable FEWidth,fSize=9,value= $(df+"FEWidth")	Button showData,pos={451,303},size={40,20},proc=PF_PanelControls,title="Data",fSize=10	Button showHistory,pos={494,303},size={60,20},proc=PF_PanelControls,title="History",fSize=10	Button animate,pos={450,273},size={100,20},proc=PF_PanelControls,title="Animate",fSize=10	CheckBox check0,pos={380,116},size={51,14},title="history",proc=PF_histCheckProc	CheckBox check0,variable= $(df+"chanAutoHist")	Button killHist,pos={449,216},size={100,20},proc=PF_PanelControls,title="Kill History",fSize=10EndMacroFunction PF_SetParms(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	PF_CopyParms(dfn)	updatePFPanel(dfn)EndFunction PF_SetConstraintParms(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	PF_CopyParms(dfn)	PF_MakeConstraints(dfn )	updatePFPanel(dfn)End//copies from PFPanel to hold arrays when new values are typed to PFPanelfunction PF_CopyParms(dfn)	string dfn	string df="root:"+dfn+":"	//hold popup menus	wave hold=$(df+"hold"), minmax=$(df+"minmax")	nvar peak=$(df+"peak")	nvar poshold=$(df+"poshold"),posrelpeak=$(df+"posrelpeak"),posrelval=$(df+"posrelval"),poslo=$(df+"poslo"),poshi=$(df+"poshi")	nvar amphold=$(df+"amphold"),amprelpeak=$(df+"amprelpeak"),amprelval=$(df+"amprelval"),amplo=$(df+"amplo"),amphi=$(df+"amphi")	nvar lwhold=$(df+"lwhold"),lwrelpeak=$(df+"lwrelpeak"),lwrelval=$(df+"lwrelval"),lwlo=$(df+"lwlo"),lwhi=$(df+"lwhi")	nvar gwhold=$(df+"gwhold"),gwrelpeak=$(df+"gwrelpeak"),gwrelval=$(df+"gwrelval"),gwlo=$(df+"gwlo"),gwhi=$(df+"gwhi")	nvar asymhold=$(df+"asymhold"),asymrelpeak=$(df+"asymrelpeak"),asymrelval=$(df+"asymrelval"),asymlo=$(df+"asymlo"),asymhi=$(df+"asymhi")	nvar splithold=$(df+"splithold"),splitrelpeak=$(df+"splitrelpeak"),splitrelval=$(df+"splitrelval"),splitlo=$(df+"splitlo"),splithi=$(df+"splithi")	nvar ratiohold=$(df+"ratiohold"),ratiorelpeak=$(df+"ratiorelpeak"),ratiorelval=$(df+"ratiorelval"),ratiolo=$(df+"ratiolo"),ratiohi=$(df+"ratiohi")	controlinfo/w=$(df+"_Panel") poshold ;	hold[0][peak][0]=v_value-1	controlinfo/w=$(df+"_Panel") amphold ;	hold[1][peak][0]=v_value-1	controlinfo/w=$(df+"_Panel") lwhold ;		hold[2][peak][0]=v_value-1	controlinfo/w=$(df+"_Panel") gwhold ;		hold[3][peak][0]=v_value-1	controlinfo/w=$(df+"_Panel") asymhold ;	hold[4][peak][0]=v_value-1	controlinfo/w=$(df+"_Panel") splithold ;	hold[5][peak][0]=v_value-1	controlinfo/w=$(df+"_Panel") ratiohold ;	hold[6][peak][0]=v_value-1	//numerical controls	hold[0][peak][2]=posrelpeak;		hold[0][peak][1]=posrelval	hold[1][peak][2]=amprelpeak;		hold[1][peak][1]=amprelval	hold[2][peak][2]=lwrelpeak;		hold[2][peak][1]=lwrelval	hold[3][peak][2]=gwrelpeak;		hold[3][peak][1]=gwrelval	hold[4][peak][2]=asymrelpeak;		hold[4][peak][1]=asymrelval	hold[5][peak][2]=splitrelpeak;		hold[5][peak][1]=splitrelval	hold[6][peak][2]=ratiorelpeak;		hold[6][peak][1]=ratiorelval		minmax[0][peak][0]=poslo;		minmax[0][peak][1]=poshi	minmax[1][peak][0]=amplo;		minmax[1][peak][1]=amphi	minmax[2][peak][0]=lwlo;			minmax[2][peak][1]=lwhi	minmax[3][peak][0]=gwlo;			minmax[3][peak][1]=gwhi	minmax[4][peak][0]=asymlo;		minmax[4][peak][1]=asymhi	minmax[5][peak][0]=splitlo;		minmax[5][peak][1]=splithi	minmax[6][peak][0]=ratiolo;		minmax[6][peak][1]=ratiohiend	Function PF_SetParmMenu(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	nvar np=$(df+"numpks")	if ((np==1)*(popnum==4))		doalert 0, "Sorry, you must have at least 2 peaks defined before you can use this option"		PopupMenu POShold, win=$(dfn+"_Panel"), mode=1	else		PF_doParmMenu(dfn)	endifendfunction PF_DoParmMenu(dfn)		string dfn	PF_CopyParms(dfn)	PF_MakeConstraints(dfn)	UpdatePFPanel(dfn)end//if any "bkgdn fixed?" is checked, save all to hold arrayfunction PF_SetFixed(dfn)	string dfn	string df="root:"+dfn+":"	wave hold=$(df+"hold")	controlinfo/w=$(dfn+"_Panel") fix0;	hold[0][0][0]=v_value 	controlinfo/w=$(dfn+"_Panel") fix1;	hold[1][0][0]=v_value	controlinfo/w=$(dfn+"_Panel") fix2;	hold[2][0][0]=v_value	controlinfo/w=$(dfn+"_Panel") fix3;	hold[3][0][0]=v_value	controlinfo/w=$(dfn+"_Panel") fix4;	hold[4][0][0]=v_value	//controlinfo/w=$(dfn+"_Panel") fix5;	hold[5][0][0]=::v_value	//controlinfo/w=$(dfn+"_Panel") fix6;	hold[6][0][0]=::v_value	controlinfo/w=$(dfn+"_Panel") fixFEPos;	hold[5][0][0]=v_value	controlinfo/w=$(dfn+"_Panel") fixFEWid;	hold[6][0][0]=v_valueendFunction PF_SetFixedFcn(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	PF_SetFixed(dfn)EndFunction PF_EditBkgdProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	PF_copyBkgdParms(dfn)	updateXPSfit(dfn,0)EndFunction  PF_CopyBkgdParms(dfn)//here	string dfn	string df="root:"+dfn+":"	wave fitparms=$(df+"fitparms")	controlinfo/w=PFPanel bkgd0; fitparms[0][0]=v_value	controlinfo/w=PFPanel bkgd1; fitparms[1][0]=v_value	controlinfo/w=PFPanel bkgd2; fitparms[2][0]=v_value	controlinfo/w=PFPanel bkgd3; fitparms[3][0]=v_value	controlinfo/w=PFPanel bkgd4; fitparms[4][0]=v_value	controlinfo/w=PFPanel FEPos; fitparms[5][0]=v_value	controlinfo/w=PFPanel FEWidth; fitparms[6][0]=v_valueend		function  PF_DoFit2History(dfn)	string dfn	string df="root:"+dfn+":"	nvar numpks=$(df+"numpks"),channel=$(df+"channel")	wave  fitparms=$(df+"fitparms"),fittype=$(df+"fittype"), hold=$(df+"hold")	wave hist_fitparms=$(df+"hist_fitparms"),hist_fittype=$(df+"hist_fittype"),hist_npks=$(df+"hist_npks"),hist_chisq=$(df+"hist_chisq")	wave hist_isStored=$(df+"hist_isStored"),hist_hold=$(df+"hist_hold")	nvar v_chisq=$(df+"v_chisq")	hist_fitparms[][0,numpks][channel]=fitparms[p][q][channel]	hist_fittype[0,numpks][channel]=fittype[p][channel]	hist_npks[channel]=numpks	hist_chisq[channel]=v_chisq	hist_isStored[channel]=1	hist_hold[][][][channel]=hold[p][q][r]	PF_calchistory(dfn)endfunction PF_DoKillHistory(dfn)	string dfn	string df="root:"+dfn+":"	wave hist_fitparms=$(df+"hist_fitparms"),hist_fittype =$(df+"hist_fittype"), hist_npks=$(df+"hist_npks"), hist_chisq=$(df+"hist_chisq")	wave hist_isStored=$(df+"hist_isStored"),hist_hold =$(df+"hist_hold")	nvar channel=$(df+"channel")	hist_fitparms[][0,][channel]=nan	hist_fittype[0,][channel]=nan	hist_npks[channel]=nan	hist_chisq[channel]=nan	hist_isStored[channel]=nan	hist_hold[][][][channel]=nan	PF_calchistory(dfn)endfunction PF_DoHistory2Fit(dfn)	string dfn	string df="root:"+dfn+":"	wave hist_isStored=$(df+"hist_isStored"), hist_npks=$(df+"hist_npks"), fitparms=$(df+"fitparms")	wave hist_fitparms=$(df+"hist_fitparms"), fittype=$(df+"fittype"), hist_fittype=$(df+"hist_fittype")	wave hold=$(df+"hold"), hist_hold=$(df+"hist_hold")	nvar channel=$(df+"channel"), numpks=$(df+"numpks")	if(hist_isStored[channel])		numpks=hist_npks[channel]		redimension/n=(7,numpks+1) fitparms		fitparms[][]=hist_fitparms[p][q][channel]		redimension/n=(numpks+1) fittype		fittype[][]=hist_fittype[p][channel]		redimension/n=(7,numpks+1,3) hold		hold[][][]=hist_hold[p][q][r][channel]		updatePFPanel(dfn)	endifendfunction PF_DoFitReport(dfn) 	string dfn	string df="root:"+dfn+":"	dowindow/f $(dfn+"fitparms")	if (v_flag==0)		PF_fitparms(dfn)	endif	dowindow/f$( dfn+"FitReport")	if (v_flag==0)		newlayout/n=$(dfn+"FitReport")//, dfn+"_fitparms"		DoWindow/C/T$(dfn+"_FitReport"),dfn+"FitReport"		appendlayoutObject table   $(dfn+"fitparms")	endifendfunction PF_DoSeriesReport(dfn)	string dfn	string df="root:"+dfn+":"	PF_calcHistory(dfn)	dowindow/f $(dfn+"history")	if(v_flag==0)		PF_history(dfn)	endif	dowindow/k $(dfn+"SeriesReport")	Newlayout/p=landscape/n=$(dfn +"SeriesReport")	dowindow/c/t $(dfn+"SeriesReport"), dfn+" Series Report"	appendlayoutObject graph   $(dfn+"history")	ModifyLayout left($(dfn+"history"))=14,top($(dfn+"history"))=14,height($(dfn+"history"))=576, width($(dfn+"history"))=756end//animate and create stack plotfunction PF_DoAnimate(ch0,ch1)	variable ch0,ch1	string dfn=winname(0,1)	string df="root:"+dfn+":"	dowindow/F $dfn	newmovie/L/F=10 	variable dir=sign(ch1-ch0)	variable np	variable i	wave hist_npks=$(df+"hist_npks")	svar xwv=$(df+"xwv")	For(i=0;i<=(ch1-ch0)+1;i+=1)		PF_CopyChannel(dfn,ch0+i*dir)		PF_dohistory2fit(dfn)				addmovieframe		if(i==0)			//initialize stack plot			wavestats/q hist_npks			variable pkmax=v_max			variable j			For(j=0;j<=pkmax;j+=1)				//wvn_=":pf:hist_peak"+num2str(j+1)				wave singlechannel=$(df+"singlechannel")				np=numpnts(singlechannel)+1				make/o/n=(np,(ch1-ch0)+1) $(df+"hist_peak"+num2str(j+1))				wave wvn_=$(df+"hist_peak"+num2str(j+1))			endfor			duplicate/o wvn_ $(df+"hist_peakx"), $(df+"hist_peakfit"), $(df+"hist_bkgd"), $(df+"hist_dataFit")			wave hist_peakx=$(df+"hist_peakx"), hist_peakfit=$(df+"hist_peakfit")			wave hist_bkgd=$(df+"hist_bkgd"), hist_dataFit=$(df+"hist_dataFit")			wave singlechannel_x=$(df+"singlechannel_x"), peakfit=$(df+"peakfit"), bkgdfit=$(df+"bkgdfit")			if(strlen(xwv)>0)				hist_peakx=singlechannel_x[p]			else				hist_peakx=p*dimdelta(singlechannel,0)+dimoffset(singlechannel,0)			endif		endif		hist_peakfit[0,np-2][i]= peakfit[p]; hist_peakfit[np-1][i]= nan		hist_bkgd[0,np-2][i]= bkgdfit[p]; hist_bkgd[np-1][i]= nan		hist_dataFit[0,np-2][i]= singlechannel[p]; hist_dataFit[np-1][i]= nan		for(i=0;i<=pkmax;i+=1)			wave wvn_=$(df+"hist_peak"+num2str(i+1))			wave wvn=$(df+"peak"+num2str(i+1))			wave hist_npks=$(df+"hist_npks")			if(i<hist_npks[j])				wvn_[0,np-2][j]=wvn[p]			else				wvn_[0,np-2][j]=nan			endif			wvn_[np-1][j]=nan		endfor	endfor	closemovie	PF_makeFitStack()end//makes fit stack assuming PF_DoAnimate has already runfunction PF_MakeFitStack()	string dfn=winname(0,1)	string df="root:"+dfn+":"	duplicate/o $(df+"hist_peakfit") $(df+"hist_peakFitStack")	duplicate/o $(df+"hist_datafit") $(df+"hist_dataFitStack")	duplicate/o $(df+"hist_peakx") $(df+"hist_peakxStack")	Execute df+"hist_peakFitStack:="+df+"hist_peakfit[p][q]+q*"+df+"offsetStackPF"	Execute df+"hist_dataFitStack:="+df+"hist_datafit[p][q]+q*"+df+"offsetStackPF"		Execute df+"hist_peakxStack:="+df+"hist_peakX[p][q]+q*"+df+"shiftStackPF"	dowindow/f FitStack	if(v_flag==0)		PF_FitStack(dfn)	endifendfunction PF_CalcHistory(dfn)	string dfn	string df="root:"+dfn+":"	nvar npk=$(df+"numpks")	wave hist_npks=$(df+"hist_npks")	wavestats/q hist_npks	variable npkmax=v_max	nvar nch=$(df+"nchan")	wave hist_POS=$(df+"hist_POS"),hist_AMP =$(df+"hist_AMP"),hist_LW =$(df+"hist_LW"), hist_GW=$(df+"hist_GW")	wave  hist_ASYM=$(df+"hist_ASYM"), hist_SPLIT=$(df+"hist_SPLIT"), hist_RATIO=$(df+"hist_RATIO")	wave hist_fitparms=$(df+"hist_fitparms")	hist_POS=nan	hist_AMP=nan	hist_LW=nan	hist_GW=nan	hist_ASYM=nan	hist_SPLIT=nan	hist_RATIO=nan	//copy parameters from history		hist_POS[0,nch-1][1,npkmax] = hist_fitparms[0][q][p]	hist_AMP[0,nch-1][1,npkmax] = hist_fitparms[1][q][p]	hist_LW[0,nch-1][1,npkmax] = hist_fitparms[2][q][p]	hist_GW[0,nch-1][1,npkmax] = hist_fitparms[3][q][p]	hist_ASYM[0,nch-1][1,npkmax] = hist_fitparms[4][q][p]	hist_SPLIT[0,nch-1][1,npkmax] = hist_fitparms[5][q][p]	hist_RATIO[0,nch-1][1,npkmax] = hist_fitparms[6][q][p]end///========= HISTORY BROWSER ROUTINES//Function DataWindowProc(ctrlName) : ButtonControl//	String ctrlName//	string dfn //	PF_DoDataWindowProc(dfn)//EndFunction PF_DoDataWindowProc(dfn)	string dfn	dowindow/f $dfnendFunction PF_DoSelectPeakBrowseProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	PF_SelectPeakBrowse()EndFunction PF_SelectPeakBrowse()	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"	PF_updateHistBrowser(dfn)endFunction PF_HistoryBrowser(dfn) : Graph	string dfn	string df="root:"+dfn+":"	wave browse_y=$(df+"browse_y"), browse_x=$(df+"browse_x")	Display /W=(651,47,1194,429) browse_y vs browse_x as dfn+"_HistoryBrowser"	DoWindow/F/C $(dfn+"_HistoryBrowser")	ModifyGraph mode=3	ModifyGraph gaps=0	ModifyGraph axisEnab(left)={0,0.85}	Label left "hist_INDVAR"	Label bottom "hist_POS"	Cursor/P A browse_y 0	ShowInfo	ShowTools	PopupMenu LeftAxis,pos={62,2},size={98,20},proc=PF_updateHistBrowserProc	PopupMenu LeftAxis,mode=1,popvalue="hist_INDVAR",value= #"\"hist_INDVAR;hist_POS;hist_AMP;hist_LW;hist_GW;hist_ASYM;hist_SOSPLIT;hist_SORATIO\""	PopupMenu BottomAxis,pos={194,2},size={75,20},proc=PF_updateHistBrowserProc	PopupMenu BottomAxis,mode=2,popvalue="hist_POS",value= #"\"hist_INDVAR;hist_POS;hist_AMP;hist_LW;hist_GW;hist_ASYM;hist_SOSPLIT;hist_SORATIO\""	Button transpose,pos={302,2},size={90,20},proc=PF_HistoryBrowserButtons,title="Transpose",fSize=10	Button export,pos={400,2},size={90,20},proc=PF_HistoryBrowserButtons,title="Export",fSize=10	Button showData,pos={401,28},size={40,20},proc=PF_HistoryBrowserButtons,title="Data",fSize=10	Button showData01,pos={443,28},size={50,20},proc=PF_HistoryBrowserButtons,title="FitPanel",fSize=10	SetVariable which_PkBrowse,pos={51,23},size={120,15},proc=PF_doSelectPeakBrowseProc,title="Peak (0=all)"	SetVariable which_PkBrowse,limits={0,19,1},value= $(df+"whichHistBrowse")	Button update,pos={347,28},size={50,20},proc=PF_HistoryBrowserButtons,title="Update",fSize=10	SetDrawLayer UserFront	SetDrawEnv xcoord= abs,ycoord= abs,fillfgc= (65535,21845,0)	DrawRect 494,0,14,54	SetDrawEnv xcoord= abs,ycoord= abs	DrawText 33.1481481481482,18.1390841320554,"Plot"	SetDrawEnv xcoord= abs,ycoord= abs	DrawText 179.074696545285,19.2790085314047,"vs"EndFunction PF_HistCheckProc(cba) : CheckBoxControl	STRUCT WMCheckboxAction &cba	switch( cba.eventCode )		case 2: // mouse up			Variable checked = cba.checked			break	endswitch	checkbox check0 value=checked	return 0Endfunction PF_DoHistoryWindowProc(dfn)	string dfn	string df="root:"+dfn+":"		dowindow/f $(dfn+"_HistoryBrowser")	if (v_flag==0)		PF_HistoryBrowser(dfn)	endif	PF_updateHistBrowser(dfn)endfunction PF_DoFitterWindowProc(dfn)	string dfn	string df="root:"+dfn+":"		dowindow/f $(dfn+"_Panel")	UpdatePFpanel(dfn)	dowindow/f $(dfn+"_Panel")endFunction PF_updateHistBrowserProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	string dfn=winname(0,1)	dfn=dfn[0,strlen(dfn)-16]	string df="root:"+dfn+":"	PF_updateHistBrowser(dfn)	Endfunction PF_updateHistBrowser(dfn)	string dfn	string df="root:"+dfn+":"	nvar whichHistBrowse=$(df+"whichHistBrowse")	wave browse_y=$(df+"browse_y")	controlinfo/w=$(dfn+"_HistoryBrowser") leftAxis	string svalue=s_value	wave  wv=$(df+svalue) 	if(whichHistBrowse==0)		duplicate/o wv $(df+"browse_x") 		Execute df+"browse_y:="+df+svalue	else		browse_y=wv[p][whichHistBrowse]	endif	label left svalue	controlinfo/w=$(dfn+"_HistoryBrowser") bottomAxis	 svalue=s_value	 wave  wv=$(df+svalue) 	if(whichHistBrowse==0)		duplicate/o wv $(df+"browse_x") 		Execute df+"browse_x:="+df+svalue	else		wave browse_x=$(df+"browse_x")		browse_x=wv[p][whichHistBrowse]	endif	label bottom svalue	resumeupdateendfunction PF_DoTranspose(dfn)	string dfn	string df="root:"+dfn+":"	controlinfo/w=$(dfn+"_HistoryBrowser") leftAxis 	variable lv=v_value	string ls=s_value	controlinfo/w=$(dfn+"_HistoryBrowser") bottomAxis	variable bv=v_value	string bs=s_value		popupmenu leftaxis win=$(dfn+"_HistoryBrowser"),mode=bv	popupmenu bottomaxis win=$(dfn+"_HistoryBrowser"),mode=lv	PF_updateHistBrowser(dfn)endFunction PF_HistoryBrowserButtons(ctrlName) : ButtonControl	String ctrlName	string dfn=winname(0,1)	dfn=dfn[0,strlen(dfn)-16]	strswitch(ctrlName)			case "update": 	//UpdateButtonProc				PF_updateHistBrowser(dfn)				break			case "export":	//ExportHistoryProc				PF_doExportHistory(dfn)				break			case "transpose":				PF_doTranspose(dfn)				break			case "showdata":				PF_DoDataWindowProc(dfn)				break			case "showData01":				PF_DoFitterWindowProc(dfn)				break	endswitchEnd//above PFfunction PF_DoExportHistory(dfn)	string dfn	string df="root:"+dfn+":"	string pref	variable peaknum, disp	svar lastExportName=$(df+"lastExportName")	nvar whichHistBrowse=$(df+"whichHistBrowse")	prompt pref "Prefix of new waves"	prompt peaknum, "Peaknum (0=all peaks)"	prompt disp, "Output mode", popup "new graph;append to graph;new table;append to table"	DoPrompt "Export:" pref, peaknum, disp	if (V_Flag)		abort									endif	lastExportName=pref	whichHistBrowse=peaknum	if (peaknum<0) 		peaknum=0	endif	wave hist_npks=$(df+"hist_npks")	wavestats/q hist_npks	if(peaknum>v_max)		peaknum=v_max	endif	if (strlen(pref)==0)		abort "Aborted because no prefix specified"	endif	variable mx,i	if(peaknum==0)		mx=v_max		i=1	else		mx=peaknum		i=peaknum	endif	variable istart=i	//string leftname, bottomname, winnam	string leftname, bottomname, winnam	variable np	print i,mx	string vv=""	if (disp==1)		display		vv="vs"	endif	if(disp==2)		dfn=(getstrfromlist(winlist("*",";","win:1"),1,";"))		dowindow/f $dfn		vv="vs"	endif	if(disp==3)		edit	endif	if(disp==4)		dfn=(getstrfromlist(winlist("*",";","win:2"),0,";"))		dowindow/f $dfn	endif	do		controlinfo/w=$(dfn+"_HistoryBrowser") leftAxis		leftname=pref+"_pk"+num2str(i)+"_"+s_value[5,100]		wave wv=$(df+s_value)		np=dimsize(wv,0)		make/o/n=(np) $(leftname)		wave leftnamewv=$(leftname)		leftnamewv[]=wv[p][i]		controlinfo/w=$(dfn+"_HistoryBrowser") bottomAxis		bottomname=pref+"_"+num2str(i)+"_"+s_value[5,100]		wave wv=$(df+s_value)		make/o/n=(np) $(bottomname)		wave bottomnamewv=$(bottomname)		bottomnamewv[]=wv[p][i]		appendtograph leftnamewv vs bottomnamewv		i+=1	while (i<=mx)end	;======================= WINDOW ROUTINES =======================Window PF_Hold(dfn) : Table	string dfn	string df="root:"+dfn=";"	//PauseUpdate; Silent 1		// building window...	//String fldrSav= GetDataFolder(1)	//SetDataFolder root:PF:	wave hold=$(df+"hold")	Edit/W=(2,456,329,623) hold as "PF_hold"	//SetDataFolder fldrSavEndMacroWindow PF_Constraints(dfn) : Table	string dfn	string df="root:"+dfn=";"//	PauseUpdate; Silent 1		// building window...//	String fldrSav= GetDataFolder(1)//	SetDataFolder root:PF:	wave contraints=$(df+"constraints")	Edit/W=(3,249,232,558) constraints as "PF_constraints"//	SetDataFolder fldrSavEndMacroWindow PF_DSGtable(dfn) : Table	string dfn	string df="root:"+dfn=";"//	PauseUpdate; Silent 1		// building window...//	String fldrSav= GetDataFolder(1)//	SetDataFolder root:PF:	wave DSGtable=$(df+"DSGtable")	Edit/W=(38,312,498,465) DSGtable as "PF_dsgtable"//	SetDataFolder fldrSavEndMacroFunction PF_FitParms(dfn) : Table	string dfn	string df="root:"+dfn+":"	wave fitparms=$(df+"fitparms")	wave parmnames=$(df+"parmnames")	Edit/W=(461,52,899,249) fitparms,parmnames as dfn+"FitParms"	ModifyTable width(Point)=10,width(fitparms)=74,alignment(parmnames)=0	DoWindow/C $(dfn+"fitparms")EndFunction PF_History(dfn) : Graph	string dfn	string df="root:"+dfn+":"	Display /W=(5,42,386,637)/L=POS $(df+"hist_POS" )vs $(df+"hist_indvar") as dfn+"history"	dowindow/c/t $(dfn+"history"), dfn+"history"	AppendToGraph/L=AMP $(df+"hist_AMP") vs $(df+"hist_indvar")	AppendToGraph/L=LW $(df+"hist_LW") vs $(df+"hist_indvar")	AppendToGraph/L=GW $(df+"hist_GW") vs $(df+"hist_indvar")	AppendToGraph/L=ASYM $(df+"hist_ASYM") vs $(df+"hist_indvar")	AppendToGraph/L=SPLIT $(df+"hist_SPLIT") vs $(df+"hist_indvar")	AppendToGraph/L=RATIO $(df+"hist_RATIO") vs $(df+"hist_indvar")	ModifyGraph margin(left)=72	ModifyGraph mode=4	ModifyGraph marker=19	ModifyGraph msize=2	ModifyGraph tick=2	ModifyGraph mirror=1	ModifyGraph minor(bottom)=1	ModifyGraph lblPos(POS)=72,lblPos(AMP)=72,lblPos(LW)=72,lblPos(GW)=72,lblPos(ASYM)=72	ModifyGraph lblPos(SPLIT)=72,lblPos(RATIO)=72	ModifyGraph freePos(POS)=0	ModifyGraph freePos(AMP)=0	ModifyGraph freePos(LW)=0	ModifyGraph freePos(GW)=0	ModifyGraph freePos(ASYM)=0	ModifyGraph freePos(SPLIT)=0	ModifyGraph freePos(RATIO)={0,bottom}	ModifyGraph axisEnab(POS)={0.85,1}	ModifyGraph axisEnab(AMP)={0.71,0.84}	ModifyGraph axisEnab(LW)={0.57,0.7}	ModifyGraph axisEnab(GW)={0.43,0.56}	ModifyGraph axisEnab(ASYM)={0.29,0.42}	ModifyGraph axisEnab(SPLIT)={0.15,0.28}	ModifyGraph axisEnab(RATIO)={0,0.14}	Label POS "POS"	Label AMP "AMP"	Label LW "LW"	Label GW "GW"	Label ASYM "ASYM"	Label SPLIT "SPLIT"	Label RATIO "RATIO"EndFunction PF_FitStack(dfn) : Graph	string dfn	string df="root:"+dfn+":"	PauseUpdate; Silent 1		// building window...	String fldrSav0= GetDataFolder(1)	Display /W=(-1910,26,-1353,705) hist_dataFitStack,hist_peakFitStack vs hist_peakxStack as "FitStack"	SetDataFolder fldrSav0	ModifyGraph marker(hist_dataFitStack)=19	ModifyGraph rgb(hist_peakFitStack)=(0,0,0)	ModifyGraph msize(hist_dataFitStack)=2	ModifyGraph opaque(hist_dataFitStack)=1	SetVariable offsetFitStack,pos={123,2},size={100,15},title="offset"	SetVariable offsetFitStack,limits={-inf,inf,100},value= $(df+"offsetStackPF")	SetVariable shiftFitStack,pos={233,2},size={100,15},title="shift"	SetVariable shiftFitStack,limits={-inf,inf,0.01},value= $(df+"shiftStackPF")EndFunction PF_SetVarChannel(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	string dfn=winname(0,64)	dfn=dfn[0,strlen(dfn)-7]	string df="root:"+dfn+":"		PF_CopyChannel(dfn,varNum)	nvar auto=$(df+"chanAutoHist")	if(auto)		PF_DoHistory2Fit(dfn)	endifEnd